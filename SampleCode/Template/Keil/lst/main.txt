; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;642    
;;;643    void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;644    {
;;;645        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  4c06              LDR      r4,|L1.28|
000004  2201              MOVS     r2,#1
000006  0391              LSLS     r1,r2,#14
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;646    
;;;647        GPIO_SetMode(PB, BIT15, GPIO_MODE_OUTPUT);	
00000e  2201              MOVS     r2,#1
000010  03d1              LSLS     r1,r2,#15
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;648    }
000018  bd10              POP      {r4,pc}
;;;649    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40004040

                          AREA ||i.NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_SystemReset PROC
;;;729     */
;;;730    __STATIC_INLINE void NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
;;;731    {
;;;732      __DSB();                                                          /* Ensure all outstanding memory accesses included
;;;733                                                                           buffered write are completed before reset */
;;;734      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
000004  4904              LDR      r1,|L2.24|
000006  4803              LDR      r0,|L2.20|
000008  60c8              STR      r0,[r1,#0xc]
;;;735                     SCB_AIRCR_SYSRESETREQ_Msk);
;;;736      __DSB();                                                          /* Ensure completion of memory access */
00000a  f3bf8f4f          DSB      
                  |L2.14|
;;;737    
;;;738      for(;;)                                                           /* wait until reset */
;;;739      {
;;;740        __NOP();
00000e  bf00              NOP      
000010  e7fd              B        |L2.14|
;;;741      }
;;;742    }
;;;743    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x05fa0004
                  |L2.24|
                          DCD      0xe000ed00

                          AREA ||i.PDMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDMA_IRQHandler PROC
;;;253    
;;;254    void PDMA_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;255    {
;;;256        uint32_t status = PDMA_GET_INT_STATUS(PDMA);
000002  4c12              LDR      r4,|L3.76|
000004  69e0              LDR      r0,[r4,#0x1c]
;;;257    
;;;258        if (status & PDMA_INTSTS_ABTIF_Msk)   /* abort */
000006  07c1              LSLS     r1,r0,#31
000008  d005              BEQ      |L3.22|
;;;259        {
;;;260            printf("target abort interrupt !!\n");
00000a  a011              ADR      r0,|L3.80|
00000c  f7fffffe          BL       __2printf
;;;261            PDMA_CLR_ABORT_FLAG(PDMA, PDMA_GET_ABORT_STS(PDMA));
000010  6a20              LDR      r0,[r4,#0x20]
000012  6220              STR      r0,[r4,#0x20]
                  |L3.20|
;;;262        }
;;;263        else if (status & PDMA_INTSTS_TDIF_Msk)     /* done */
;;;264        {
;;;265            if((PDMA_GET_TD_STS(PDMA) & SPI_MASTER_OPENED_CH_TX) == SPI_MASTER_OPENED_CH_TX)
;;;266            {
;;;267                /* Clear PDMA transfer done interrupt flag */
;;;268                PDMA_CLR_TD_FLAG(PDMA, SPI_MASTER_OPENED_CH_TX);
;;;269    
;;;270    			//insert process
;;;271    			SPI_DISABLE_TX_PDMA(SPI0);
;;;272    
;;;273    			set_flag(flag_transmit_end,ENABLE);
;;;274            } 
;;;275    
;;;276    		#if defined (ENABLE_SPI_RX)
;;;277            if((PDMA_GET_TD_STS(PDMA) & SPI_MASTER_OPENED_CH_RX) == SPI_MASTER_OPENED_CH_RX)
;;;278            {
;;;279                /* Clear PDMA transfer done interrupt flag */
;;;280                PDMA_CLR_TD_FLAG(PDMA, SPI_MASTER_OPENED_CH_RX);
;;;281    
;;;282    			//insert process
;;;283    			SPI_DISABLE_RX_PDMA(SPI0);
;;;284    
;;;285    			set_flag(flag_transmit_end,ENABLE);
;;;286            } 
;;;287    		#endif
;;;288        }
;;;289        else if (status & (PDMA_INTSTS_REQTOF0_Msk))     /* channel timeout */
;;;290        {
;;;291            printf("timeout interrupt !!\n");
;;;292            PDMA_CLR_TMOUT_FLAG(PDMA, SPI_MASTER_TX_DMA_CH);
;;;293        }
;;;294        else
;;;295        {
;;;296    //        printf("unknown interrupt !!\n");
;;;297        }
;;;298    }
000014  bd10              POP      {r4,pc}
                  |L3.22|
000016  0781              LSLS     r1,r0,#30             ;263
000018  d50f              BPL      |L3.58|
00001a  6a60              LDR      r0,[r4,#0x24]         ;265
00001c  0700              LSLS     r0,r0,#28             ;265
00001e  d5f9              BPL      |L3.20|
000020  2008              MOVS     r0,#8                 ;268
000022  6260              STR      r0,[r4,#0x24]         ;268
000024  4811              LDR      r0,|L3.108|
000026  68c1              LDR      r1,[r0,#0xc]          ;271
000028  0849              LSRS     r1,r1,#1              ;271
00002a  0049              LSLS     r1,r1,#1              ;271
00002c  60c1              STR      r1,[r0,#0xc]          ;271
00002e  4810              LDR      r0,|L3.112|
000030  6841              LDR      r1,[r0,#4]            ;273  ; BitFlag
000032  2210              MOVS     r2,#0x10              ;273
000034  4311              ORRS     r1,r1,r2              ;273
000036  6041              STR      r1,[r0,#4]            ;273  ; BitFlag
                  |L3.56|
000038  bd10              POP      {r4,pc}
                  |L3.58|
00003a  05c0              LSLS     r0,r0,#23             ;289
00003c  d5fc              BPL      |L3.56|
00003e  a00d              ADR      r0,|L3.116|
000040  f7fffffe          BL       __2printf
000044  2001              MOVS     r0,#1                 ;292
000046  02c0              LSLS     r0,r0,#11             ;292
000048  61e0              STR      r0,[r4,#0x1c]         ;292
00004a  bd10              POP      {r4,pc}
;;;299    
                          ENDP

                  |L3.76|
                          DCD      0x40008400
                  |L3.80|
000050  74617267          DCB      "target abort interrupt !!\n",0
000054  65742061
000058  626f7274
00005c  20696e74
000060  65727275
000064  70742021
000068  210a00  
00006b  00                DCB      0
                  |L3.108|
                          DCD      0x40061000
                  |L3.112|
                          DCD      ||.data||
                  |L3.116|
000074  74696d65          DCB      "timeout interrupt !!\n",0
000078  6f757420
00007c  696e7465
000080  72727570
000084  74202121
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.PDMA_Polling_SPI||, CODE, READONLY, ALIGN=2

                  PDMA_Polling_SPI PROC
;;;198    
;;;199    void PDMA_Polling_SPI(void)
000000  490c              LDR      r1,|L4.52|
                  |L4.2|
;;;200    {
;;;201    	uint32_t u32RegValue = 0;
;;;202    	uint32_t u32Abort = 0;	
;;;203    
;;;204        while(1)
;;;205        {
;;;206            /* Get interrupt status */
;;;207            u32RegValue = PDMA_GET_INT_STATUS(PDMA);
000002  69c8              LDR      r0,[r1,#0x1c]
;;;208            /* Check the DMA transfer done interrupt flag */
;;;209            if(u32RegValue & PDMA_INTSTS_TDIF_Msk)
000004  0782              LSLS     r2,r0,#30
000006  d5fc              BPL      |L4.2|
;;;210            {
;;;211                /* Check the PDMA transfer done interrupt flags */
;;;212                if((PDMA_GET_TD_STS(PDMA) & SPI_MASTER_OPENED_CH_TX) == SPI_MASTER_OPENED_CH_TX)
000008  6a4a              LDR      r2,[r1,#0x24]
00000a  0712              LSLS     r2,r2,#28
00000c  d50c              BPL      |L4.40|
;;;213                {
;;;214                    /* Clear the DMA transfer done flags */
;;;215                    PDMA_CLR_TD_FLAG(PDMA, SPI_MASTER_OPENED_CH_TX);
00000e  2008              MOVS     r0,#8
000010  6248              STR      r0,[r1,#0x24]
;;;216    				
;;;217                    /* Disable SPI PDMA TX function */
;;;218                    SPI_DISABLE_TX_PDMA(SPI0);
000012  4809              LDR      r0,|L4.56|
000014  68c1              LDR      r1,[r0,#0xc]
000016  0849              LSRS     r1,r1,#1
000018  0049              LSLS     r1,r1,#1
00001a  60c1              STR      r1,[r0,#0xc]
;;;219    
;;;220    				set_flag(flag_transmit_end,ENABLE);
00001c  4807              LDR      r0,|L4.60|
00001e  6841              LDR      r1,[r0,#4]  ; BitFlag
000020  2210              MOVS     r2,#0x10
000022  4311              ORRS     r1,r1,r2
000024  6041              STR      r1,[r0,#4]  ; BitFlag
;;;221    				
;;;222                    break;
;;;223                }
;;;224    
;;;225    			#if defined (ENABLE_SPI_RX)
;;;226                if((PDMA_GET_TD_STS(PDMA) & SPI_MASTER_OPENED_CH_RX) == SPI_MASTER_OPENED_CH_RX)
;;;227                {
;;;228                    /* Clear the DMA transfer done flags */
;;;229                    PDMA_CLR_TD_FLAG(PDMA, SPI_MASTER_OPENED_CH_RX);
;;;230    				
;;;231                    /* Disable SPI PDMA TX function */
;;;232                    SPI_DISABLE_TX_PDMA(SPI0);
;;;233    
;;;234    				set_flag(flag_transmit_end,ENABLE);
;;;235    				
;;;236                    break;
;;;237                }
;;;238    			#endif
;;;239    
;;;240                /* Check the DMA transfer abort interrupt flag */
;;;241                if(u32RegValue & PDMA_INTSTS_ABTIF_Msk)
;;;242                {
;;;243                    /* Get the target abort flag */
;;;244                    u32Abort = PDMA_GET_ABORT_STS(PDMA);
;;;245                    /* Clear the target abort flag */
;;;246                    PDMA_CLR_ABORT_FLAG(PDMA,u32Abort);
;;;247                    break;
;;;248                }
;;;249            }
;;;250        }
;;;251    
;;;252    }
000026  4770              BX       lr
                  |L4.40|
000028  07c0              LSLS     r0,r0,#31             ;241
00002a  d0ea              BEQ      |L4.2|
00002c  6a08              LDR      r0,[r1,#0x20]         ;244
00002e  6208              STR      r0,[r1,#0x20]         ;246
000030  4770              BX       lr
;;;253    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40008400
                  |L4.56|
                          DCD      0x40061000
                  |L4.60|
                          DCD      ||.data||

                          AREA ||i.SPI_Initial||, CODE, READONLY, ALIGN=2

                  SPI_Initial PROC
;;;481    
;;;482    void SPI_Initial(uint8_t en_spi_pdma , uint8_t en_auto_ss)
000000  b5f8              PUSH     {r3-r7,lr}
;;;483    {      
000002  4605              MOV      r5,r0
;;;484        uint16_t i = 0;
;;;485    	
;;;486    	//prepare data
;;;487        for (i=0; i < SPI_DATA_LEN; i++)
;;;488        {
;;;489            SpiTxBuffer[i] = 0xFF;
000004  482a              LDR      r0,|L5.176|
000006  460c              MOV      r4,r1                 ;483
000008  2200              MOVS     r2,#0                 ;484
00000a  23ff              MOVS     r3,#0xff
;;;490            SpiRxBuffer[i] = 0xFF;
00000c  4601              MOV      r1,r0
00000e  3120              ADDS     r1,r1,#0x20
                  |L5.16|
000010  5483              STRB     r3,[r0,r2]            ;489
000012  548b              STRB     r3,[r1,r2]
000014  1c52              ADDS     r2,r2,#1
000016  b292              UXTH     r2,r2                 ;487
000018  2a20              CMP      r2,#0x20              ;487
00001a  d3f9              BCC      |L5.16|
;;;491        }
;;;492    
;;;493    	SPI_Open(SPI0, SPI_MASTER, SPI_MODE_0, 8, SPI_FREQ);
00001c  4825              LDR      r0,|L5.180|
00001e  4f26              LDR      r7,|L5.184|
000020  9000              STR      r0,[sp,#0]
000022  2308              MOVS     r3,#8
000024  2204              MOVS     r2,#4
000026  2100              MOVS     r1,#0
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       SPI_Open
;;;494    
;;;495    	if (en_auto_ss)
;;;496    	{
;;;497    		set_flag(flag_enable_SPI_auto_SS ,ENABLE);
00002e  4e23              LDR      r6,|L5.188|
000030  2020              MOVS     r0,#0x20
;;;498    
;;;499    		SPI_EnableAutoSS(SPI0, SPI_SS, SPI_SS_ACTIVE_LOW);		
;;;500    	}
;;;501    	else
;;;502    	{
;;;503    		set_flag(flag_enable_SPI_auto_SS ,DISABLE);
000032  6871              LDR      r1,[r6,#4]  ; BitFlag
000034  2c00              CMP      r4,#0                 ;495
000036  d007              BEQ      |L5.72|
000038  4301              ORRS     r1,r1,r0              ;497
00003a  6071              STR      r1,[r6,#4]            ;497  ; BitFlag
00003c  2200              MOVS     r2,#0                 ;499
00003e  2101              MOVS     r1,#1                 ;499
000040  4638              MOV      r0,r7                 ;499
000042  f7fffffe          BL       SPI_EnableAutoSS
000046  e017              B        |L5.120|
                  |L5.72|
000048  4381              BICS     r1,r1,r0
00004a  6071              STR      r1,[r6,#4]  ; BitFlag
;;;504    
;;;505       		SYS_UnlockReg();
00004c  f7fffffe          BL       SYS_UnlockReg
;;;506    	    SYS->GPA_MFPL &= ~( SYS_GPA_MFPL_PA3MFP_Msk);	
000050  2001              MOVS     r0,#1
000052  0780              LSLS     r0,r0,#30
000054  6b01              LDR      r1,[r0,#0x30]
000056  220f              MOVS     r2,#0xf
000058  0312              LSLS     r2,r2,#12
00005a  4391              BICS     r1,r1,r2
00005c  6301              STR      r1,[r0,#0x30]
;;;507    	    SYS->GPA_MFPL |=  SYS_GPA_MFPL_PA3MFP_GPIO;	
00005e  6b01              LDR      r1,[r0,#0x30]
000060  6301              STR      r1,[r0,#0x30]
;;;508    		GPIO_SetMode(PA,BIT3,GPIO_MODE_OUTPUT);	
000062  2201              MOVS     r2,#1
000064  2108              MOVS     r1,#8
000066  4816              LDR      r0,|L5.192|
000068  f7fffffe          BL       GPIO_SetMode
00006c  4815              LDR      r0,|L5.196|
00006e  2100              MOVS     r1,#0
000070  6001              STR      r1,[r0,#0]
;;;509        	SYS_LockReg();
;;;510    
;;;511    	    SPI_DisableAutoSS(SPI0);
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       SPI_DisableAutoSS
                  |L5.120|
;;;512    	}
;;;513    
;;;514    	switch(en_spi_pdma)
000078  2d00              CMP      r5,#0
00007a  d004              BEQ      |L5.134|
00007c  2d01              CMP      r5,#1
00007e  d007              BEQ      |L5.144|
000080  2d02              CMP      r5,#2
000082  d10f              BNE      |L5.164|
000084  e007              B        |L5.150|
                  |L5.134|
;;;515    	{
;;;516    		case ENABLE_SPI_REGULAR:
;;;517    			set_flag(flag_enable_SPI_regular ,ENABLE);				
000086  6870              LDR      r0,[r6,#4]  ; BitFlag
000088  2140              MOVS     r1,#0x40
00008a  4308              ORRS     r0,r0,r1
00008c  6070              STR      r0,[r6,#4]  ; BitFlag
;;;518    			break;
00008e  e009              B        |L5.164|
                  |L5.144|
;;;519    		case ENABLE_SPI_PDMA_POLLING:
;;;520    			set_flag(flag_enable_SPI_pdma_polling ,ENABLE);		
000090  6870              LDR      r0,[r6,#4]  ; BitFlag
000092  2180              MOVS     r1,#0x80
;;;521    			//	SPI_SET_SUSPEND_CYCLE(SPI0,15);	
;;;522    			SPI_PDMA_Init();			
;;;523    			break;
000094  e002              B        |L5.156|
                  |L5.150|
;;;524    		case ENABLE_SPI_PDMA_IRQ:
;;;525    			set_flag(flag_enable_SPI_pdma_irq ,ENABLE);	
000096  6870              LDR      r0,[r6,#4]  ; BitFlag
000098  21ff              MOVS     r1,#0xff
00009a  3101              ADDS     r1,#1
                  |L5.156|
00009c  4308              ORRS     r0,r0,r1              ;520
00009e  6070              STR      r0,[r6,#4]            ;520  ; BitFlag
0000a0  f7fffffe          BL       SPI_PDMA_Init
                  |L5.164|
;;;526    			//	SPI_SET_SUSPEND_CYCLE(SPI0,15);	
;;;527    			SPI_PDMA_Init();			
;;;528    			break;		
;;;529    	}
;;;530    	
;;;531    	set_flag(flag_transmit_normal , DISABLE);
0000a4  6870              LDR      r0,[r6,#4]  ; BitFlag
0000a6  2102              MOVS     r1,#2
0000a8  4388              BICS     r0,r0,r1
0000aa  6070              STR      r0,[r6,#4]  ; BitFlag
;;;532    
;;;533    }
0000ac  bdf8              POP      {r3-r7,pc}
;;;534    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L5.176|
                          DCD      ||.bss||
                  |L5.180|
                          DCD      0x00030d40
                  |L5.184|
                          DCD      0x40061000
                  |L5.188|
                          DCD      ||.data||
                  |L5.192|
                          DCD      0x40004000
                  |L5.196|
                          DCD      0x40000100

                          AREA ||i.SPI_PDMA_Init||, CODE, READONLY, ALIGN=2

                  SPI_PDMA_Init PROC
;;;412    
;;;413    void SPI_PDMA_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;414    {
;;;415    	if (!is_flag_set(flag_enable_SPI_auto_SS))
000002  4c28              LDR      r4,|L6.164|
000004  6860              LDR      r0,[r4,#4]  ; BitFlag
000006  2600              MOVS     r6,#0
000008  0680              LSLS     r0,r0,#26
00000a  2800              CMP      r0,#0
00000c  db01              BLT      |L6.18|
;;;416    	{
;;;417    		SPI_SET_CS_LOW;
00000e  4826              LDR      r0,|L6.168|
000010  60c6              STR      r6,[r0,#0xc]
                  |L6.18|
;;;418    	}
;;;419    	set_flag(flag_transmit_end,DISABLE);
000012  6860              LDR      r0,[r4,#4]  ; BitFlag
000014  2110              MOVS     r1,#0x10
000016  4388              BICS     r0,r0,r1
000018  6060              STR      r0,[r4,#4]  ; BitFlag
;;;420    
;;;421        /* Open PDMA Channel */
;;;422        PDMA_Open(PDMA, SPI_MASTER_OPENED_CH_TX | SPI_MASTER_OPENED_CH_RX);
00001a  4d24              LDR      r5,|L6.172|
00001c  2118              MOVS     r1,#0x18
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       PDMA_Open
;;;423    
;;;424    	//TX
;;;425        PDMA_SetTransferCnt(PDMA,SPI_MASTER_TX_DMA_CH, PDMA_WIDTH_8, SPI_DATA_LEN);
000024  2320              MOVS     r3,#0x20
000026  2200              MOVS     r2,#0
000028  2103              MOVS     r1,#3
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       PDMA_SetTransferCnt
;;;426        /* Set source/destination address and attributes */
;;;427        PDMA_SetTransferAddr(PDMA,SPI_MASTER_TX_DMA_CH, (uint32_t)SpiTxBuffer, PDMA_SAR_INC, (uint32_t)&SPI0->TX, PDMA_DAR_FIX);
000030  2103              MOVS     r1,#3
000032  0289              LSLS     r1,r1,#10
000034  481e              LDR      r0,|L6.176|
000036  9101              STR      r1,[sp,#4]
000038  9000              STR      r0,[sp,#0]
00003a  2300              MOVS     r3,#0
00003c  4a1d              LDR      r2,|L6.180|
00003e  2103              MOVS     r1,#3
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       PDMA_SetTransferAddr
;;;428        /* Set request source; set basic mode. */
;;;429        PDMA_SetTransferMode(PDMA,SPI_MASTER_TX_DMA_CH, PDMA_SPI0_TX, FALSE, 0);
000046  2300              MOVS     r3,#0
000048  2212              MOVS     r2,#0x12
00004a  2103              MOVS     r1,#3
00004c  4628              MOV      r0,r5
00004e  9600              STR      r6,[sp,#0]
000050  f7fffffe          BL       PDMA_SetTransferMode
;;;430        /* Single request type. SPI only support PDMA single request type. */
;;;431        PDMA_SetBurstType(PDMA,SPI_MASTER_TX_DMA_CH, PDMA_REQ_SINGLE, 0);
000054  2300              MOVS     r3,#0
000056  2204              MOVS     r2,#4
000058  2103              MOVS     r1,#3
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       PDMA_SetBurstType
;;;432        /* Disable table interrupt */
;;;433    //    PDMA->DSCT[SPI_MASTER_TX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;434    	PDMA_DisableInt(PDMA, SPI_MASTER_TX_DMA_CH,PDMA_INT_TEMPTY);
000060  2201              MOVS     r2,#1
000062  2103              MOVS     r1,#3
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       PDMA_DisableInt
;;;435        SPI_TRIGGER_TX_PDMA(SPI0);	
00006a  4811              LDR      r0,|L6.176|
00006c  3820              SUBS     r0,r0,#0x20
00006e  68c1              LDR      r1,[r0,#0xc]
000070  2201              MOVS     r2,#1
000072  4311              ORRS     r1,r1,r2
000074  60c1              STR      r1,[r0,#0xc]
;;;436    	
;;;437    	if (is_flag_set(flag_enable_SPI_pdma_irq))
000076  6860              LDR      r0,[r4,#4]  ; BitFlag
000078  05c0              LSLS     r0,r0,#23
00007a  d504              BPL      |L6.134|
;;;438    	{	
;;;439        	PDMA_EnableInt(PDMA, SPI_MASTER_TX_DMA_CH, PDMA_INT_TRANS_DONE);
00007c  2200              MOVS     r2,#0
00007e  2103              MOVS     r1,#3
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       PDMA_EnableInt
                  |L6.134|
;;;440    	}
;;;441    
;;;442    	if (is_flag_set(flag_enable_SPI_pdma_polling))
000086  6860              LDR      r0,[r4,#4]  ; BitFlag
000088  0600              LSLS     r0,r0,#24
00008a  d501              BPL      |L6.144|
;;;443    	{
;;;444    		PDMA_Polling_SPI();
00008c  f7fffffe          BL       PDMA_Polling_SPI
                  |L6.144|
;;;445    	}
;;;446    	
;;;447    	#if defined (ENABLE_SPI_RX)	
;;;448    	//RX	
;;;449        PDMA_SetTransferCnt(PDMA,SPI_MASTER_RX_DMA_CH, PDMA_WIDTH_8, SPI_DATA_LEN);
;;;450        /* Set source/destination address and attributes */
;;;451        PDMA_SetTransferAddr(PDMA,SPI_MASTER_RX_DMA_CH, (uint32_t)&SPI0->RX, PDMA_SAR_FIX, (uint32_t)SpiRxBuffer, PDMA_DAR_INC);
;;;452        /* Set request source; set basic mode. */
;;;453        PDMA_SetTransferMode(PDMA,SPI_MASTER_RX_DMA_CH, PDMA_SPI0_RX, FALSE, 0);
;;;454        /* Single request type. SPI only support PDMA single request type. */
;;;455        PDMA_SetBurstType(PDMA,SPI_MASTER_RX_DMA_CH, PDMA_REQ_SINGLE, 0);
;;;456        /* Disable table interrupt */
;;;457    //    PDMA->DSCT[SPI_MASTER_RX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;458    	PDMA_DisableInt(PDMA, SPI_MASTER_RX_DMA_CH,PDMA_INT_TEMPTY);	
;;;459        SPI_TRIGGER_RX_PDMA(SPI0);	
;;;460    
;;;461    	if (is_flag_set(flag_enable_SPI_pdma_irq))
;;;462    	{
;;;463        	PDMA_EnableInt(PDMA, SPI_MASTER_RX_DMA_CH, PDMA_INT_TRANS_DONE);	
;;;464    	}	
;;;465    
;;;466    	if (is_flag_set(flag_enable_SPI_pdma_polling))
;;;467    	{
;;;468    		PDMA_Polling_SPI();
;;;469    	}
;;;470    	
;;;471    	#endif
;;;472    
;;;473    	if (is_flag_set(flag_enable_SPI_pdma_irq))
000090  6860              LDR      r0,[r4,#4]  ; BitFlag
000092  05c0              LSLS     r0,r0,#23
000094  d503              BPL      |L6.158|
000096  2001              MOVS     r0,#1
000098  4907              LDR      r1,|L6.184|
00009a  0680              LSLS     r0,r0,#26
00009c  6008              STR      r0,[r1,#0]
                  |L6.158|
;;;474    	{
;;;475        	NVIC_EnableIRQ(PDMA_IRQn);
;;;476    	}
;;;477    
;;;478    	SPI_transmit_finish();
00009e  f7fffffe          BL       SPI_transmit_finish
;;;479    	
;;;480    }
0000a2  bd7c              POP      {r2-r6,pc}
;;;481    
                          ENDP

                  |L6.164|
                          DCD      ||.data||
                  |L6.168|
                          DCD      0x40004800
                  |L6.172|
                          DCD      0x40008000
                  |L6.176|
                          DCD      0x40061020
                  |L6.180|
                          DCD      ||.bss||
                  |L6.184|
                          DCD      0xe000e100

                          AREA ||i.SPI_process||, CODE, READONLY, ALIGN=2

                  SPI_process PROC
;;;534    
;;;535    void SPI_process(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;536    {
;;;537    	uint16_t i = 0;	
;;;538    	static uint8_t data_cnt = 1;
;;;539    
;;;540    	if (is_flag_set(flag_transmit_sendReceive))
000002  4c3b              LDR      r4,|L7.240|
000004  2000              MOVS     r0,#0                 ;537
000006  6861              LDR      r1,[r4,#4]  ; BitFlag
;;;541    	{
;;;542    		set_flag(flag_transmit_sendReceive , DISABLE);
;;;543    
;;;544    		for (i = 0 ; i < SPI_DATA_LEN ; i++ )
;;;545    		{
;;;546    			SpiTxBuffer[i] = 0x81 + i ;
;;;547    		}
;;;548    		SpiTxBuffer[0] = 0x80;	
000008  2780              MOVS     r7,#0x80
00000a  0709              LSLS     r1,r1,#28             ;540
;;;549    		SpiTxBuffer[1] = 0x84;	
;;;550    		SpiTxBuffer[2] = 0x81;		
;;;551    		SpiTxBuffer[3] = 0x04;	
00000c  2604              MOVS     r6,#4
00000e  4d39              LDR      r5,|L7.244|
000010  2900              CMP      r1,#0                 ;540
000012  da26              BGE      |L7.98|
000014  6861              LDR      r1,[r4,#4]            ;542  ; BitFlag
000016  2208              MOVS     r2,#8                 ;542
000018  4391              BICS     r1,r1,r2              ;542
00001a  6061              STR      r1,[r4,#4]            ;542  ; BitFlag
                  |L7.28|
00001c  4601              MOV      r1,r0                 ;546
00001e  3181              ADDS     r1,r1,#0x81           ;546
000020  5429              STRB     r1,[r5,r0]            ;546
000022  1c40              ADDS     r0,r0,#1              ;546
000024  b280              UXTH     r0,r0                 ;544
000026  2820              CMP      r0,#0x20              ;544
000028  d3f8              BCC      |L7.28|
00002a  702f              STRB     r7,[r5,#0]            ;548
00002c  2084              MOVS     r0,#0x84              ;549
00002e  7068              STRB     r0,[r5,#1]            ;549
000030  2081              MOVS     r0,#0x81              ;550
000032  70a8              STRB     r0,[r5,#2]            ;550
000034  70ee              STRB     r6,[r5,#3]
;;;552    		
;;;553    		SpiTxBuffer[4] = 0x40 + data_cnt;	
000036  7821              LDRB     r1,[r4,#0]  ; data_cnt
000038  4608              MOV      r0,r1
00003a  3140              ADDS     r1,r1,#0x40
00003c  7129              STRB     r1,[r5,#4]
00003e  4601              MOV      r1,r0
000040  3151              ADDS     r1,r1,#0x51
;;;554    		SpiTxBuffer[5] = 0x51 + data_cnt;	
000042  7169              STRB     r1,[r5,#5]
000044  3111              ADDS     r1,r1,#0x11
;;;555    		SpiTxBuffer[6] = 0x62 + data_cnt;	
000046  71a9              STRB     r1,[r5,#6]
000048  312e              ADDS     r1,r1,#0x2e
;;;556    		
;;;557    		SpiTxBuffer[SPI_DATA_LEN-3] = 0x90 + data_cnt;	
00004a  7769              STRB     r1,[r5,#0x1d]
00004c  3092              ADDS     r0,r0,#0x92
;;;558    		SpiTxBuffer[SPI_DATA_LEN-1] = 0x92 + data_cnt;
00004e  77e8              STRB     r0,[r5,#0x1f]
;;;559    		
;;;560    		SPI_transmit_TxStart();
000050  f7fffffe          BL       SPI_transmit_TxStart
;;;561    
;;;562    		data_cnt = (data_cnt > 0x9) ? (1) : (data_cnt+1) ; 
000054  7820              LDRB     r0,[r4,#0]  ; data_cnt
000056  2809              CMP      r0,#9
000058  d901              BLS      |L7.94|
00005a  2001              MOVS     r0,#1
00005c  e000              B        |L7.96|
                  |L7.94|
00005e  1c40              ADDS     r0,r0,#1
                  |L7.96|
000060  7020              STRB     r0,[r4,#0]
                  |L7.98|
;;;563    
;;;564    		#if defined (ENABLE_SPI_RX)
;;;565    		SPI_transmit_RxStart();
;;;566    		#endif
;;;567    		
;;;568    		#if (_debug_SPI_SEND_RCV_CMD == 1)	//debug
;;;569    		printf("RX=======\r\n");
;;;570    
;;;571    		dump_buffer_hex(SpiRxBuffer,SPI_DATA_LEN);
;;;572    
;;;573    		printf("\r\n");
;;;574    		#endif		
;;;575    	}
;;;576    	
;;;577    
;;;578    	if (is_flag_set(flag_transmit_getver))
000062  6860              LDR      r0,[r4,#4]  ; BitFlag
000064  0740              LSLS     r0,r0,#29
000066  d524              BPL      |L7.178|
;;;579    	{
;;;580    		set_flag(flag_transmit_getver , DISABLE);
000068  6860              LDR      r0,[r4,#4]  ; BitFlag
00006a  43b0              BICS     r0,r0,r6
00006c  6060              STR      r0,[r4,#4]  ; BitFlag
;;;581    
;;;582    		for (i = 0 ; i < SPI_DATA_LEN ; i++ )
00006e  2000              MOVS     r0,#0
                  |L7.112|
;;;583    		{
;;;584    			SpiTxBuffer[i] = 0x81 + i ;
000070  4601              MOV      r1,r0
000072  3181              ADDS     r1,r1,#0x81
000074  5429              STRB     r1,[r5,r0]
000076  1c40              ADDS     r0,r0,#1
000078  b280              UXTH     r0,r0                 ;582
00007a  2820              CMP      r0,#0x20              ;582
00007c  d3f8              BCC      |L7.112|
;;;585    		}
;;;586    		SpiTxBuffer[0] = 0x80;	
00007e  702f              STRB     r7,[r5,#0]
;;;587    		SpiTxBuffer[1] = 0x10 + data_cnt;	
000080  7820              LDRB     r0,[r4,#0]  ; data_cnt
000082  4601              MOV      r1,r0
000084  3110              ADDS     r1,r1,#0x10
000086  7069              STRB     r1,[r5,#1]
;;;588    		SpiTxBuffer[2] = 0x21 + data_cnt;	
000088  3111              ADDS     r1,r1,#0x11
00008a  70a9              STRB     r1,[r5,#2]
00008c  3032              ADDS     r0,r0,#0x32
;;;589    		SpiTxBuffer[3] = 0x32 + data_cnt;			
00008e  70e8              STRB     r0,[r5,#3]
;;;590    
;;;591    		SpiTxBuffer[SPI_DATA_LEN-4] = 'g';	
000090  2067              MOVS     r0,#0x67
000092  7728              STRB     r0,[r5,#0x1c]
;;;592    		SpiTxBuffer[SPI_DATA_LEN-3] = 'e';	
000094  2065              MOVS     r0,#0x65
000096  7768              STRB     r0,[r5,#0x1d]
;;;593    		SpiTxBuffer[SPI_DATA_LEN-2] = 't';	
000098  2074              MOVS     r0,#0x74
00009a  77a8              STRB     r0,[r5,#0x1e]
;;;594    		SpiTxBuffer[SPI_DATA_LEN-1] = 0x41;	
00009c  2041              MOVS     r0,#0x41
00009e  77e8              STRB     r0,[r5,#0x1f]
;;;595    		
;;;596    		SPI_transmit_TxStart();
0000a0  f7fffffe          BL       SPI_transmit_TxStart
;;;597    
;;;598    		data_cnt = (data_cnt > 0x9) ? (1) : (data_cnt+1) ; 
0000a4  7820              LDRB     r0,[r4,#0]  ; data_cnt
0000a6  2809              CMP      r0,#9
0000a8  d901              BLS      |L7.174|
0000aa  2001              MOVS     r0,#1
0000ac  e000              B        |L7.176|
                  |L7.174|
0000ae  1c40              ADDS     r0,r0,#1
                  |L7.176|
0000b0  7020              STRB     r0,[r4,#0]
                  |L7.178|
;;;599    
;;;600    		#if defined (ENABLE_SPI_RX)
;;;601    		SPI_transmit_RxStart();
;;;602    		#endif
;;;603    
;;;604    		
;;;605    		#if (_debug_SPI_GET_VER_ == 1)		//debug
;;;606    		printf("RX=======\r\n");
;;;607    		dump_buffer_hex(SpiRxBuffer,SPI_DATA_LEN);
;;;608    		printf("\r\n");
;;;609    		#endif
;;;610    		
;;;611    	}
;;;612    	
;;;613    
;;;614    	if (is_flag_set(flag_transmit_normal))
0000b2  6860              LDR      r0,[r4,#4]  ; BitFlag
0000b4  0780              LSLS     r0,r0,#30
0000b6  d51a              BPL      |L7.238|
;;;615    	{
;;;616    		set_flag(flag_transmit_normal , DISABLE);
0000b8  6860              LDR      r0,[r4,#4]  ; BitFlag
0000ba  2102              MOVS     r1,#2
0000bc  4388              BICS     r0,r0,r1
0000be  6060              STR      r0,[r4,#4]  ; BitFlag
;;;617    
;;;618    		for (i = 0 ; i < SPI_DATA_LEN ; i++ )
0000c0  2000              MOVS     r0,#0
                  |L7.194|
;;;619    		{
;;;620    			SpiTxBuffer[i] = 0x80 + i ;
0000c2  4601              MOV      r1,r0
0000c4  3180              ADDS     r1,r1,#0x80
0000c6  5429              STRB     r1,[r5,r0]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  b280              UXTH     r0,r0                 ;618
0000cc  2820              CMP      r0,#0x20              ;618
0000ce  d3f8              BCC      |L7.194|
;;;621    		}
;;;622    
;;;623    		SpiTxBuffer[SPI_DATA_LEN-2] = 0x90 + data_cnt;	
0000d0  7820              LDRB     r0,[r4,#0]  ; data_cnt
0000d2  4601              MOV      r1,r0
0000d4  3190              ADDS     r1,r1,#0x90
0000d6  77a9              STRB     r1,[r5,#0x1e]
0000d8  3092              ADDS     r0,r0,#0x92
;;;624    		SpiTxBuffer[SPI_DATA_LEN-1] = 0x92 + data_cnt;
0000da  77e8              STRB     r0,[r5,#0x1f]
;;;625    		
;;;626    		SPI_transmit_TxStart();
0000dc  f7fffffe          BL       SPI_transmit_TxStart
;;;627    
;;;628    		data_cnt = (data_cnt > 0x9) ? (1) : (data_cnt+1) ; 
0000e0  7820              LDRB     r0,[r4,#0]  ; data_cnt
0000e2  2809              CMP      r0,#9
0000e4  d901              BLS      |L7.234|
0000e6  2001              MOVS     r0,#1
0000e8  e000              B        |L7.236|
                  |L7.234|
0000ea  1c40              ADDS     r0,r0,#1
                  |L7.236|
0000ec  7020              STRB     r0,[r4,#0]
                  |L7.238|
;;;629    
;;;630    		#if defined (ENABLE_SPI_RX)
;;;631    		SPI_transmit_RxStart();
;;;632    		#endif
;;;633    		
;;;634    		#if (_debug_SPI_REGULAR_TX_ == 1)	//debug
;;;635    		printf("RX=======\r\n");
;;;636    		dump_buffer_hex(SpiRxBuffer,SPI_DATA_LEN);
;;;637    		printf("\r\n");
;;;638    		#endif
;;;639    		
;;;640    	}
;;;641    }
0000ee  bdf8              POP      {r3-r7,pc}
;;;642    
                          ENDP

                  |L7.240|
                          DCD      ||.data||
                  |L7.244|
                          DCD      ||.bss||

                          AREA ||i.SPI_transmit_RxStart||, CODE, READONLY, ALIGN=2

                  SPI_transmit_RxStart PROC
;;;309    
;;;310    void SPI_transmit_RxStart(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;311    {
;;;312        uint32_t i = 0;
;;;313    	
;;;314    	if (!is_flag_set(flag_enable_SPI_auto_SS))
000002  4e2b              LDR      r6,|L8.176|
000004  2400              MOVS     r4,#0                 ;312
000006  6870              LDR      r0,[r6,#4]  ; BitFlag
000008  4627              MOV      r7,r4
00000a  0680              LSLS     r0,r0,#26
00000c  2800              CMP      r0,#0
00000e  db01              BLT      |L8.20|
;;;315    	{
;;;316    		SPI_SET_CS_LOW;
000010  4828              LDR      r0,|L8.180|
000012  60c7              STR      r7,[r0,#0xc]
                  |L8.20|
;;;317    	}
;;;318    	set_flag(flag_transmit_end,DISABLE);
000014  6870              LDR      r0,[r6,#4]  ; BitFlag
000016  2110              MOVS     r1,#0x10
000018  4388              BICS     r0,r0,r1
00001a  6070              STR      r0,[r6,#4]  ; BitFlag
;;;319    
;;;320    	if (is_flag_set(flag_enable_SPI_pdma_polling) | is_flag_set(flag_enable_SPI_pdma_irq))
00001c  6870              LDR      r0,[r6,#4]  ; BitFlag
00001e  6871              LDR      r1,[r6,#4]  ; BitFlag
000020  0600              LSLS     r0,r0,#24
000022  05c9              LSLS     r1,r1,#23
;;;321    	{
;;;322    		//RX	
;;;323    		PDMA_SetTransferCnt(PDMA,SPI_MASTER_RX_DMA_CH, PDMA_WIDTH_8, SPI_DATA_LEN);
;;;324    		PDMA_SetTransferAddr(PDMA,SPI_MASTER_RX_DMA_CH, (uint32_t)&SPI0->RX, PDMA_SAR_FIX, (uint32_t)SpiRxBuffer, PDMA_DAR_INC);		
;;;325    		/* Set request source; set basic mode. */
;;;326    		PDMA_SetTransferMode(PDMA,SPI_MASTER_RX_DMA_CH, PDMA_SPI0_RX, FALSE, 0);
;;;327    		SPI_TRIGGER_RX_PDMA(SPI0);
000024  4d24              LDR      r5,|L8.184|
000026  4308              ORRS     r0,r0,r1              ;320
000028  d52a              BPL      |L8.128|
00002a  2320              MOVS     r3,#0x20              ;323
00002c  2200              MOVS     r2,#0                 ;323
00002e  2104              MOVS     r1,#4                 ;323
000030  4822              LDR      r0,|L8.188|
000032  f7fffffe          BL       PDMA_SetTransferCnt
000036  4822              LDR      r0,|L8.192|
000038  4a1f              LDR      r2,|L8.184|
00003a  2303              MOVS     r3,#3                 ;324
00003c  9000              STR      r0,[sp,#0]            ;324
00003e  021b              LSLS     r3,r3,#8              ;324
000040  3230              ADDS     r2,r2,#0x30           ;324
000042  2104              MOVS     r1,#4                 ;324
000044  9701              STR      r7,[sp,#4]            ;324
000046  481d              LDR      r0,|L8.188|
000048  f7fffffe          BL       PDMA_SetTransferAddr
00004c  2300              MOVS     r3,#0                 ;326
00004e  2213              MOVS     r2,#0x13              ;326
000050  2104              MOVS     r1,#4                 ;326
000052  481a              LDR      r0,|L8.188|
000054  9700              STR      r7,[sp,#0]            ;326
000056  f7fffffe          BL       PDMA_SetTransferMode
00005a  68e8              LDR      r0,[r5,#0xc]
00005c  2102              MOVS     r1,#2
00005e  4308              ORRS     r0,r0,r1
000060  60e8              STR      r0,[r5,#0xc]
;;;328    
;;;329    		if (is_flag_set(flag_enable_SPI_pdma_irq))
000062  6870              LDR      r0,[r6,#4]  ; BitFlag
000064  05c0              LSLS     r0,r0,#23
000066  d504              BPL      |L8.114|
;;;330    		{
;;;331    			PDMA_EnableInt(PDMA, SPI_MASTER_RX_DMA_CH, PDMA_INT_TRANS_DONE);	
000068  2200              MOVS     r2,#0
00006a  2104              MOVS     r1,#4
00006c  4813              LDR      r0,|L8.188|
00006e  f7fffffe          BL       PDMA_EnableInt
                  |L8.114|
;;;332    		}
;;;333    		if (is_flag_set(flag_enable_SPI_pdma_polling))
000072  6870              LDR      r0,[r6,#4]  ; BitFlag
000074  0600              LSLS     r0,r0,#24
000076  d501              BPL      |L8.124|
;;;334    		{
;;;335    			PDMA_Polling_SPI();
000078  f7fffffe          BL       PDMA_Polling_SPI
                  |L8.124|
;;;336    		}
;;;337    
;;;338    		SPI_transmit_finish();
00007c  f7fffffe          BL       SPI_transmit_finish
                  |L8.128|
;;;339    	}
;;;340    	
;;;341    	if (is_flag_set(flag_enable_SPI_regular))
000080  6870              LDR      r0,[r6,#4]  ; BitFlag
000082  0640              LSLS     r0,r0,#25
000084  d512              BPL      |L8.172|
000086  490e              LDR      r1,|L8.192|
                  |L8.136|
;;;342    	{
;;;343    	    for(i = 0 ; i < SPI_DATA_LEN ; i++)
;;;344    	    {
;;;345    	        SPI_WRITE_TX(SPI0, 0x00);
000088  622f              STR      r7,[r5,#0x20]
                  |L8.138|
;;;346    	        while(SPI_IS_BUSY(SPI0));
00008a  6968              LDR      r0,[r5,#0x14]
00008c  07c0              LSLS     r0,r0,#31
00008e  d1fc              BNE      |L8.138|
;;;347    	        SpiRxBuffer[i] = SPI_READ_RX(SPI0);		
000090  6b28              LDR      r0,[r5,#0x30]
000092  5508              STRB     r0,[r1,r4]
000094  1c64              ADDS     r4,r4,#1
000096  2c20              CMP      r4,#0x20              ;343
000098  d3f6              BCC      |L8.136|
;;;348    	    }
;;;349    
;;;350    		if (!is_flag_set(flag_enable_SPI_auto_SS))
00009a  6870              LDR      r0,[r6,#4]  ; BitFlag
00009c  0680              LSLS     r0,r0,#26
00009e  d405              BMI      |L8.172|
                  |L8.160|
;;;351    		{
;;;352    		
;;;353    			while (SPI_IS_BUSY(SPI0));
0000a0  6968              LDR      r0,[r5,#0x14]
0000a2  07c0              LSLS     r0,r0,#31
0000a4  d1fc              BNE      |L8.160|
;;;354    			SPI_SET_CS_HIGH;
0000a6  4803              LDR      r0,|L8.180|
0000a8  2101              MOVS     r1,#1
0000aa  60c1              STR      r1,[r0,#0xc]
                  |L8.172|
;;;355    		}	
;;;356    	}	
;;;357    }
0000ac  bdfe              POP      {r1-r7,pc}
;;;358    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L8.176|
                          DCD      ||.data||
                  |L8.180|
                          DCD      0x40004800
                  |L8.184|
                          DCD      0x40061000
                  |L8.188|
                          DCD      0x40008000
                  |L8.192|
                          DCD      ||.bss||+0x20

                          AREA ||i.SPI_transmit_TxStart||, CODE, READONLY, ALIGN=2

                  SPI_transmit_TxStart PROC
;;;358    
;;;359    void SPI_transmit_TxStart(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;360    {
;;;361        uint32_t i = 0;
;;;362    
;;;363    	if (!is_flag_set(flag_enable_SPI_auto_SS))
000002  4e2b              LDR      r6,|L9.176|
000004  2400              MOVS     r4,#0                 ;361
000006  6870              LDR      r0,[r6,#4]  ; BitFlag
000008  4627              MOV      r7,r4
00000a  0680              LSLS     r0,r0,#26
00000c  2800              CMP      r0,#0
00000e  db01              BLT      |L9.20|
;;;364    	{
;;;365    		SPI_SET_CS_LOW;
000010  4828              LDR      r0,|L9.180|
000012  60c7              STR      r7,[r0,#0xc]
                  |L9.20|
;;;366    	}
;;;367    	set_flag(flag_transmit_end,DISABLE);
000014  6870              LDR      r0,[r6,#4]  ; BitFlag
000016  2110              MOVS     r1,#0x10
000018  4388              BICS     r0,r0,r1
00001a  6070              STR      r0,[r6,#4]  ; BitFlag
;;;368    	
;;;369    	if (is_flag_set(flag_enable_SPI_pdma_polling) | is_flag_set(flag_enable_SPI_pdma_irq))
00001c  6870              LDR      r0,[r6,#4]  ; BitFlag
00001e  6871              LDR      r1,[r6,#4]  ; BitFlag
000020  0600              LSLS     r0,r0,#24
000022  05c9              LSLS     r1,r1,#23
;;;370    	{
;;;371    		//TX
;;;372    		PDMA_SetTransferCnt(PDMA,SPI_MASTER_TX_DMA_CH, PDMA_WIDTH_8, SPI_DATA_LEN);
;;;373    		PDMA_SetTransferAddr(PDMA,SPI_MASTER_TX_DMA_CH, (uint32_t)SpiTxBuffer, PDMA_SAR_INC, (uint32_t)&SPI0->TX, PDMA_DAR_FIX);		
;;;374    		/* Set request source; set basic mode. */
;;;375    		PDMA_SetTransferMode(PDMA,SPI_MASTER_TX_DMA_CH, PDMA_SPI0_TX, FALSE, 0);
;;;376    		
;;;377    	    //Select Single Request
;;;378    	//    PDMA_SetBurstType(PDMA, SPI_MASTER_TX_DMA_CH, PDMA_REQ_SINGLE, 0);
;;;379    	    /* Disable table interrupt */
;;;380    	//    PDMA->DSCT[SPI_MASTER_TX_DMA_CH].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;	
;;;381    	//	PDMA_DisableInt(PDMA, SPI_MASTER_TX_DMA_CH,PDMA_INT_TEMPTY);
;;;382    			
;;;383    		SPI_TRIGGER_TX_PDMA(SPI0);
000024  4d24              LDR      r5,|L9.184|
000026  4308              ORRS     r0,r0,r1              ;369
000028  d52b              BPL      |L9.130|
00002a  2320              MOVS     r3,#0x20              ;372
00002c  2200              MOVS     r2,#0                 ;372
00002e  2103              MOVS     r1,#3                 ;372
000030  4822              LDR      r0,|L9.188|
000032  f7fffffe          BL       PDMA_SetTransferCnt
000036  4820              LDR      r0,|L9.184|
000038  2103              MOVS     r1,#3                 ;373
00003a  0289              LSLS     r1,r1,#10             ;373
00003c  3020              ADDS     r0,r0,#0x20           ;373
00003e  9101              STR      r1,[sp,#4]            ;373
000040  9000              STR      r0,[sp,#0]            ;373
000042  2300              MOVS     r3,#0                 ;373
000044  4a1e              LDR      r2,|L9.192|
000046  2103              MOVS     r1,#3                 ;373
000048  481c              LDR      r0,|L9.188|
00004a  f7fffffe          BL       PDMA_SetTransferAddr
00004e  2300              MOVS     r3,#0                 ;375
000050  2212              MOVS     r2,#0x12              ;375
000052  2103              MOVS     r1,#3                 ;375
000054  4819              LDR      r0,|L9.188|
000056  9700              STR      r7,[sp,#0]            ;375
000058  f7fffffe          BL       PDMA_SetTransferMode
00005c  68e8              LDR      r0,[r5,#0xc]
00005e  2101              MOVS     r1,#1
000060  4308              ORRS     r0,r0,r1
000062  60e8              STR      r0,[r5,#0xc]
;;;384    
;;;385    		if (is_flag_set(flag_enable_SPI_pdma_irq))
000064  6870              LDR      r0,[r6,#4]  ; BitFlag
000066  05c0              LSLS     r0,r0,#23
000068  d504              BPL      |L9.116|
;;;386    		{
;;;387    	    	PDMA_EnableInt(PDMA, SPI_MASTER_TX_DMA_CH, PDMA_INT_TRANS_DONE);	
00006a  2200              MOVS     r2,#0
00006c  2103              MOVS     r1,#3
00006e  4813              LDR      r0,|L9.188|
000070  f7fffffe          BL       PDMA_EnableInt
                  |L9.116|
;;;388    		}
;;;389    		if (is_flag_set(flag_enable_SPI_pdma_polling))
000074  6870              LDR      r0,[r6,#4]  ; BitFlag
000076  0600              LSLS     r0,r0,#24
000078  d501              BPL      |L9.126|
;;;390    		{
;;;391    			PDMA_Polling_SPI();
00007a  f7fffffe          BL       PDMA_Polling_SPI
                  |L9.126|
;;;392    		}
;;;393    		
;;;394    		SPI_transmit_finish();
00007e  f7fffffe          BL       SPI_transmit_finish
                  |L9.130|
;;;395    	}
;;;396    
;;;397    	if (is_flag_set(flag_enable_SPI_regular))
000082  6870              LDR      r0,[r6,#4]  ; BitFlag
000084  0640              LSLS     r0,r0,#25
000086  d511              BPL      |L9.172|
000088  490d              LDR      r1,|L9.192|
                  |L9.138|
;;;398    	{
;;;399    	    for(i = 0 ; i < SPI_DATA_LEN ; i++)
;;;400    	    {
;;;401    	        SPI_WRITE_TX(SPI0, SpiTxBuffer[i]);
00008a  5d08              LDRB     r0,[r1,r4]
00008c  6228              STR      r0,[r5,#0x20]
                  |L9.142|
;;;402    	        while(SPI_IS_BUSY(SPI0));
00008e  6968              LDR      r0,[r5,#0x14]
000090  07c0              LSLS     r0,r0,#31
000092  d1fc              BNE      |L9.142|
000094  1c64              ADDS     r4,r4,#1
000096  2c20              CMP      r4,#0x20              ;399
000098  d3f7              BCC      |L9.138|
;;;403    	    }	
;;;404    
;;;405    		if (!is_flag_set(flag_enable_SPI_auto_SS))
00009a  6870              LDR      r0,[r6,#4]  ; BitFlag
00009c  0680              LSLS     r0,r0,#26
00009e  d405              BMI      |L9.172|
                  |L9.160|
;;;406    		{		
;;;407    			while (SPI_IS_BUSY(SPI0));
0000a0  6968              LDR      r0,[r5,#0x14]
0000a2  07c0              LSLS     r0,r0,#31
0000a4  d1fc              BNE      |L9.160|
;;;408    			SPI_SET_CS_HIGH;
0000a6  4903              LDR      r1,|L9.180|
0000a8  2001              MOVS     r0,#1
0000aa  60c8              STR      r0,[r1,#0xc]
                  |L9.172|
;;;409    		}
;;;410    	}	
;;;411    }
0000ac  bdfe              POP      {r1-r7,pc}
;;;412    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L9.176|
                          DCD      ||.data||
                  |L9.180|
                          DCD      0x40004800
                  |L9.184|
                          DCD      0x40061000
                  |L9.188|
                          DCD      0x40008000
                  |L9.192|
                          DCD      ||.bss||

                          AREA ||i.SPI_transmit_finish||, CODE, READONLY, ALIGN=2

                  SPI_transmit_finish PROC
;;;299    
;;;300    void SPI_transmit_finish(void)
000000  4807              LDR      r0,|L10.32|
;;;301    {
;;;302    	if (!is_flag_set(flag_enable_SPI_auto_SS))
000002  6841              LDR      r1,[r0,#4]  ; BitFlag
000004  0689              LSLS     r1,r1,#26
000006  d409              BMI      |L10.28|
                  |L10.8|
;;;303    	{
;;;304    		while(!is_flag_set(flag_transmit_end));		
000008  6841              LDR      r1,[r0,#4]  ; BitFlag
00000a  06c9              LSLS     r1,r1,#27
00000c  d5fc              BPL      |L10.8|
;;;305    		while (SPI_IS_BUSY(SPI0));
00000e  4805              LDR      r0,|L10.36|
                  |L10.16|
000010  6941              LDR      r1,[r0,#0x14]
000012  07c9              LSLS     r1,r1,#31
000014  d1fc              BNE      |L10.16|
;;;306    		SPI_SET_CS_HIGH;
000016  4904              LDR      r1,|L10.40|
000018  2001              MOVS     r0,#1
00001a  60c8              STR      r0,[r1,#0xc]
                  |L10.28|
;;;307    	}	
;;;308    }
00001c  4770              BX       lr
;;;309    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      ||.data||
                  |L10.36|
                          DCD      0x40061000
                  |L10.40|
                          DCD      0x40004800

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;774    
;;;775    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;776    {
;;;777        /* Unlock protected registers */
;;;778        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;779    
;;;780        /* Enable HIRC clock (Internal RC 48MHz) */
;;;781        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       CLK_EnableXtalRC
;;;782    
;;;783        /* Wait for HIRC clock ready */
;;;784        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;785    
;;;786        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;787        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000012  2100              MOVS     r1,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       CLK_SetHCLK
;;;788    
;;;789        CLK_EnableModuleClock(UART0_MODULE);
00001a  4c1a              LDR      r4,|L11.132|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CLK_EnableModuleClock
;;;790        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
000022  2103              MOVS     r1,#3
000024  2200              MOVS     r2,#0
000026  0609              LSLS     r1,r1,#24
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       CLK_SetModuleClock
;;;791    
;;;792        CLK_EnableModuleClock(TMR3_MODULE);
00002e  4c16              LDR      r4,|L11.136|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;793      	CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_HIRC, 0);
000036  2107              MOVS     r1,#7
000038  2200              MOVS     r2,#0
00003a  0509              LSLS     r1,r1,#20
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       CLK_SetModuleClock
;;;794    
;;;795        CLK_SetModuleClock(SPI0_MODULE, CLK_CLKSEL2_SPI0SEL_PCLK1, MODULE_NoMsk);
000042  4c12              LDR      r4,|L11.140|
000044  2200              MOVS     r2,#0
000046  2120              MOVS     r1,#0x20
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       CLK_SetModuleClock
;;;796        CLK_EnableModuleClock(SPI0_MODULE);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;797    
;;;798        CLK_EnableModuleClock(PDMA_MODULE);
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       CLK_EnableModuleClock
;;;799    
;;;800        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;801        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |
00005a  07a0              LSLS     r0,r4,#30
00005c  6bc1              LDR      r1,[r0,#0x3c]
00005e  22ff              MOVS     r2,#0xff
000060  0412              LSLS     r2,r2,#16
000062  4391              BICS     r1,r1,r2
000064  2233              MOVS     r2,#0x33
000066  0452              LSLS     r2,r2,#17
000068  1889              ADDS     r1,r1,r2
00006a  63c1              STR      r1,[r0,#0x3c]
;;;802                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;803    
;;;804        /* PA.3 is SPI0_SS,   PA.2 is SPI0_CLK,
;;;805           PA.1 is SPI0_MISO, PA.0 is SPI0_MOSI*/
;;;806    
;;;807        SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA3MFP_Msk|SYS_GPA_MFPL_PA2MFP_Msk|SYS_GPA_MFPL_PA1MFP_Msk|SYS_GPA_MFPL_PA0MFP_Msk)) |
00006c  6b01              LDR      r1,[r0,#0x30]
00006e  4a08              LDR      r2,|L11.144|
000070  0c09              LSRS     r1,r1,#16
000072  0409              LSLS     r1,r1,#16
000074  1889              ADDS     r1,r1,r2
000076  6301              STR      r1,[r0,#0x30]
;;;808                        (SYS_GPA_MFPL_PA3MFP_SPI0_SS|SYS_GPA_MFPL_PA2MFP_SPI0_CLK|SYS_GPA_MFPL_PA1MFP_SPI0_MISO|SYS_GPA_MFPL_PA0MFP_SPI0_MOSI);
;;;809    
;;;810        /* Update System Core Clock */
;;;811        SystemCoreClockUpdate();
000078  f7fffffe          BL       SystemCoreClockUpdate
00007c  4905              LDR      r1,|L11.148|
00007e  2000              MOVS     r0,#0
000080  6008              STR      r0,[r1,#0]
;;;812    
;;;813        /* Lock protected registers */
;;;814        SYS_LockReg();
;;;815    }
000082  bd10              POP      {r4,pc}
;;;816    
                          ENDP

                  |L11.132|
                          DCD      0x5f803d10
                  |L11.136|
                          DCD      0x5f400005
                  |L11.140|
                          DCD      0x6640000d
                  |L11.144|
                          DCD      0x00004444
                  |L11.148|
                          DCD      0x40000100

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1342     */
;;;1343   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1344   {
;;;1345       do {
;;;1346           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L12.24|
;;;1347           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1348           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L12.10|
00000a  6001              STR      r1,[r0,#0]            ;1346
00000c  6002              STR      r2,[r0,#0]            ;1347
00000e  6003              STR      r3,[r0,#0]
;;;1349       } while (SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L12.10|
;;;1350   }
000016  bd10              POP      {r4,pc}
;;;1351   
                          ENDP

                  |L12.24|
                          DCD      0x40000100

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;700    
;;;701    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;702    {
;;;703        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L13.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L13.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;704        TIMER_EnableInt(TIMER3);
;;;705        NVIC_EnableIRQ(TMR3_IRQn);	
;;;706        TIMER_Start(TIMER3);
;;;707    }
000028  bd10              POP      {r4,pc}
;;;708    
                          ENDP

00002a  0000              DCW      0x0000
                  |L13.44|
                          DCD      0x40051020
                  |L13.48|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;650    
;;;651    void TMR3_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
000002  4816              LDR      r0,|L14.92|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;652    {
00000a  d01f              BEQ      |L14.76|
00000c  2601              MOVS     r6,#1
00000e  6086              STR      r6,[r0,#8]
;;;653    //	static uint32_t LOG = 0;
;;;654    //	static uint16_t CNT = 0;
;;;655    //	static uint16_t CNT_SPI = 0;
;;;656    	static uint8_t state = 0;
;;;657    	
;;;658        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;659        {
;;;660            TIMER_ClearIntFlag(TIMER3);
;;;661    		tick_counter();
000010  f7fffffe          BL       tick_counter
000014  4d12              LDR      r5,|L14.96|
;;;662    
;;;663    		if ((get_tick() % 1000) == 0)
000016  217d              MOVS     r1,#0x7d
000018  68ac              LDR      r4,[r5,#8]  ; conter_tick
00001a  00c9              LSLS     r1,r1,#3
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       __aeabi_uidivmod
000022  2900              CMP      r1,#0
000024  d103              BNE      |L14.46|
;;;664    		{
;;;665    //        	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;666    			PB14 ^= 1;
000026  480f              LDR      r0,|L14.100|
000028  6b81              LDR      r1,[r0,#0x38]
00002a  4071              EORS     r1,r1,r6
00002c  6381              STR      r1,[r0,#0x38]
                  |L14.46|
;;;667    		}
;;;668    
;;;669    		if ((get_tick() % 50) == 0)
00002e  2132              MOVS     r1,#0x32
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_uidivmod
000036  2900              CMP      r1,#0
000038  d108              BNE      |L14.76|
;;;670    		{
;;;671    			switch(state++)
00003a  7868              LDRB     r0,[r5,#1]  ; state
00003c  1c41              ADDS     r1,r0,#1
00003e  7069              STRB     r1,[r5,#1]
000040  2803              CMP      r0,#3
;;;672    			{
;;;673    //				case 2:
;;;674    //					set_flag(flag_transmit_getver , ENABLE);				
;;;675    //					break;
;;;676    				case 3:
;;;677    					set_flag(flag_transmit_sendReceive , ENABLE);
000042  6868              LDR      r0,[r5,#4]  ; BitFlag
000044  d003              BEQ      |L14.78|
;;;678    					state = 0;
;;;679    					break;				
;;;680    				default:
;;;681    					set_flag(flag_transmit_normal , ENABLE);					
000046  2102              MOVS     r1,#2
000048  4308              ORRS     r0,r0,r1
00004a  6068              STR      r0,[r5,#4]  ; BitFlag
                  |L14.76|
;;;682    					break;
;;;683    				
;;;684    			}
;;;685    
;;;686    //			if (state++ >= 2)
;;;687    //			{
;;;688    //				set_flag(flag_transmit_getver , ENABLE);
;;;689    //				state = 0;
;;;690    //			}
;;;691    //			else
;;;692    //			{
;;;693    //				set_flag(flag_transmit_normal , ENABLE);		
;;;694    //			}
;;;695    		}
;;;696    	
;;;697        }
;;;698    }
00004c  bd70              POP      {r4-r6,pc}
                  |L14.78|
00004e  2108              MOVS     r1,#8                 ;677
000050  4308              ORRS     r0,r0,r1              ;677
000052  6068              STR      r0,[r5,#4]            ;677  ; BitFlag
000054  2000              MOVS     r0,#0                 ;678
000056  7068              STRB     r0,[r5,#1]            ;678
000058  bd70              POP      {r4-r6,pc}
;;;699    
                          ENDP

00005a  0000              DCW      0x0000
                  |L14.92|
                          DCD      0x40051020
                  |L14.96|
                          DCD      ||.data||
                  |L14.100|
                          DCD      0x40004840

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;740    
;;;741    void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;742    {
;;;743    
;;;744        if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L15.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  2111              MOVS     r1,#0x11
000008  0209              LSLS     r1,r1,#8
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L15.20|
00000e  e004              B        |L15.26|
                  |L15.16|
;;;745        {
;;;746            while(UART_GET_RX_EMPTY(UART0) == 0)
;;;747            {
;;;748                UARTx_Process();
000010  f7fffffe          BL       UARTx_Process
                  |L15.20|
000014  69a1              LDR      r1,[r4,#0x18]         ;746
000016  0449              LSLS     r1,r1,#17             ;746
000018  d5fa              BPL      |L15.16|
                  |L15.26|
;;;749            }
;;;750        }
;;;751    
;;;752        if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4620              MOV      r0,r4
00001e  2271              MOVS     r2,#0x71
000020  4211              TST      r1,r2
000022  d003              BEQ      |L15.44|
;;;753        {
;;;754            UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000024  2109              MOVS     r1,#9
000026  0289              LSLS     r1,r1,#10
000028  f7fffffe          BL       UART_ClearIntFlag
                  |L15.44|
;;;755        }	
;;;756    }
00002c  bd10              POP      {r4,pc}
;;;757    
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;757    
;;;758    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;759    {
;;;760        SYS_ResetModule(UART0_RST);
000002  4818              LDR      r0,|L16.100|
000004  f7fffffe          BL       SYS_ResetModule
;;;761    
;;;762        /* Configure UART0 and set UART0 baud rate */
;;;763        UART_Open(UART0, 115200);
000008  4c17              LDR      r4,|L16.104|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;764        UART_EnableInt(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_RXTOIEN_Msk);
000014  2111              MOVS     r1,#0x11
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_EnableInt
00001c  2001              MOVS     r0,#1
00001e  4913              LDR      r1,|L16.108|
000020  0300              LSLS     r0,r0,#12
000022  6008              STR      r0,[r1,#0]
;;;765        NVIC_EnableIRQ(UART02_IRQn);
;;;766    	
;;;767    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000024  f7fffffe          BL       CLK_GetCPUFreq
000028  4601              MOV      r1,r0
00002a  a011              ADR      r0,|L16.112|
00002c  f7fffffe          BL       __2printf
;;;768    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000030  f7fffffe          BL       CLK_GetHXTFreq
000034  4601              MOV      r1,r0
000036  a015              ADR      r0,|L16.140|
000038  f7fffffe          BL       __2printf
;;;769    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00003c  f7fffffe          BL       CLK_GetLXTFreq
000040  4601              MOV      r1,r0
000042  a018              ADR      r0,|L16.164|
000044  f7fffffe          BL       __2printf
;;;770    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000048  f7fffffe          BL       CLK_GetPCLK0Freq
00004c  4601              MOV      r1,r0
00004e  a01b              ADR      r0,|L16.188|
000050  f7fffffe          BL       __2printf
;;;771    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
000054  f7fffffe          BL       CLK_GetPCLK1Freq
000058  4601              MOV      r1,r0
00005a  a01f              ADR      r0,|L16.216|
00005c  f7fffffe          BL       __2printf
;;;772    
;;;773    }
000060  bd10              POP      {r4,pc}
;;;774    
                          ENDP

000062  0000              DCW      0x0000
                  |L16.100|
                          DCD      0x04000010
                  |L16.104|
                          DCD      0x40070000
                  |L16.108|
                          DCD      0xe000e100
                  |L16.112|
000070  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000074  4b5f4765
000078  74435055
00007c  46726571
000080  203a2025
000084  38640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L16.140|
00008c  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000090  47657448
000094  58544672
000098  6571203a
00009c  20253864
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L16.164|
0000a4  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000a8  4765744c
0000ac  58544672
0000b0  6571203a
0000b4  20253864
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L16.188|
0000bc  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000c0  47657450
0000c4  434c4b30
0000c8  46726571
0000cc  203a2025
0000d0  38640d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L16.216|
0000d8  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000dc  47657450
0000e0  434c4b31
0000e4  46726571
0000e8  203a2025
0000ec  38640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;708    
;;;709    void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;710    {
;;;711    	uint8_t res = 0;
;;;712    	res = UART_READ(UART0);
000002  480d              LDR      r0,|L17.56|
000004  6800              LDR      r0,[r0,#0]
000006  b2c0              UXTB     r0,r0
;;;713    
;;;714    	if (res == 'x' || res == 'X')
000008  2878              CMP      r0,#0x78
00000a  d013              BEQ      |L17.52|
00000c  2858              CMP      r0,#0x58
00000e  d011              BEQ      |L17.52|
;;;715    	{
;;;716    		NVIC_SystemReset();
;;;717    	}
;;;718    
;;;719    	if (res > 0x7F)
000010  287f              CMP      r0,#0x7f
000012  d903              BLS      |L17.28|
;;;720    	{
;;;721    		printf("invalid command\r\n");
000014  a009              ADR      r0,|L17.60|
000016  f7fffffe          BL       __2printf
                  |L17.26|
;;;722    	}
;;;723    	else
;;;724    	{
;;;725    		switch(res)
;;;726    		{
;;;727    			case '1':
;;;728    				break;
;;;729    
;;;730    
;;;731    			case 'X':
;;;732    			case 'x':
;;;733    			case 'Z':
;;;734    			case 'z':
;;;735    				NVIC_SystemReset();		
;;;736    				break;
;;;737    		}
;;;738    	}
;;;739    }
00001a  bd10              POP      {r4,pc}
                  |L17.28|
00001c  285a              CMP      r0,#0x5a              ;725
00001e  d009              BEQ      |L17.52|
000020  dc04              BGT      |L17.44|
000022  2831              CMP      r0,#0x31              ;725
000024  d0f9              BEQ      |L17.26|
000026  2858              CMP      r0,#0x58              ;725
000028  d1f7              BNE      |L17.26|
00002a  e003              B        |L17.52|
                  |L17.44|
00002c  2878              CMP      r0,#0x78              ;725
00002e  d001              BEQ      |L17.52|
000030  287a              CMP      r0,#0x7a              ;725
000032  d1f2              BNE      |L17.26|
                  |L17.52|
000034  f7fffffe          BL       NVIC_SystemReset
;;;740    
                          ENDP

                  |L17.56|
                          DCD      0x40070000
                  |L17.60|
00003c  696e7661          DCB      "invalid command\r\n",0
000040  6c696420
000044  636f6d6d
000048  616e640d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.compare_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  compare_buffer PROC
;;;101    
;;;102    void compare_buffer(uint8_t *src, uint8_t *des, int nBytes)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;103    {
;;;104        uint16_t i = 0;	
000002  2400              MOVS     r4,#0
;;;105    	
;;;106        for (i = 0; i < nBytes; i++)
;;;107        {
;;;108            if (src[i] != des[i])
;;;109            {
;;;110                printf("error idx : %4d : 0x%2X , 0x%2X\r\n", i , src[i],des[i]);
;;;111    			set_flag(flag_error , ENABLE);
000004  2601              MOVS     r6,#1
000006  4617              MOV      r7,r2                 ;103
000008  0276              LSLS     r6,r6,#9
00000a  4d0f              LDR      r5,|L18.72|
00000c  e00e              B        |L18.44|
                  |L18.14|
00000e  9800              LDR      r0,[sp,#0]            ;108
000010  5d02              LDRB     r2,[r0,r4]            ;108
000012  9801              LDR      r0,[sp,#4]            ;108
000014  5d03              LDRB     r3,[r0,r4]            ;108
000016  429a              CMP      r2,r3                 ;108
000018  d006              BEQ      |L18.40|
00001a  4621              MOV      r1,r4                 ;110
00001c  a00b              ADR      r0,|L18.76|
00001e  f7fffffe          BL       __2printf
000022  6868              LDR      r0,[r5,#4]  ; BitFlag
000024  4330              ORRS     r0,r0,r6
000026  6068              STR      r0,[r5,#4]  ; BitFlag
                  |L18.40|
000028  1c64              ADDS     r4,r4,#1
00002a  b2a4              UXTH     r4,r4                 ;106
                  |L18.44|
00002c  42bc              CMP      r4,r7                 ;106
00002e  dbee              BLT      |L18.14|
;;;112            }
;;;113        }
;;;114    
;;;115    	if (!is_flag_set(flag_error))
000030  6868              LDR      r0,[r5,#4]  ; BitFlag
000032  0580              LSLS     r0,r0,#22
000034  d406              BMI      |L18.68|
;;;116    	{
;;;117        	printf("%s finish \r\n" , __FUNCTION__);	
000036  490e              LDR      r1,|L18.112|
000038  a00e              ADR      r0,|L18.116|
00003a  f7fffffe          BL       __2printf
;;;118    		set_flag(flag_error , DISABLE);
00003e  6868              LDR      r0,[r5,#4]  ; BitFlag
000040  43b0              BICS     r0,r0,r6
000042  6068              STR      r0,[r5,#4]  ; BitFlag
                  |L18.68|
;;;119    	}
;;;120    
;;;121    }
000044  bdfe              POP      {r1-r7,pc}
;;;122    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      ||.data||
                  |L18.76|
00004c  6572726f          DCB      "error idx : %4d : 0x%2X , 0x%2X\r\n",0
000050  72206964
000054  78203a20
000058  25346420
00005c  3a203078
000060  25325820
000064  2c203078
000068  2532580d
00006c  0a00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L18.112|
                          DCD      ||.constdata||
                  |L18.116|
000074  25732066          DCB      "%s finish \r\n",0
000078  696e6973
00007c  68200d0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
                  |L19.0|
;;;176    
;;;177    void delay(uint16_t dly)
000000  4601              MOV      r1,r0
;;;178    {
;;;179    /*
;;;180    	delay(100) : 14.84 us
;;;181    	delay(200) : 29.37 us
;;;182    	delay(300) : 43.97 us
;;;183    	delay(400) : 58.5 us	
;;;184    	delay(500) : 73.13 us	
;;;185    	
;;;186    	delay(1500) : 0.218 ms (218 us)
;;;187    	delay(2000) : 0.291 ms (291 us)	
;;;188    */
;;;189    
;;;190    	while( dly--);
000002  1e40              SUBS     r0,r0,#1
000004  b280              UXTH     r0,r0
000006  2900              CMP      r1,#0
000008  d1fa              BNE      |L19.0|
;;;191    }
00000a  4770              BX       lr
;;;192    
                          ENDP


                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;193    
;;;194    void delay_ms(uint16_t ms)
000000  217d              MOVS     r1,#0x7d
;;;195    {
;;;196    	TIMER_Delay(TIMER0, 1000*ms);
000002  00c9              LSLS     r1,r1,#3
000004  b510              PUSH     {r4,lr}               ;195
000006  4341              MULS     r1,r0,r1
000008  4801              LDR      r0,|L20.16|
00000a  f7fffffe          BL       TIMER_Delay
;;;197    }
00000e  bd10              POP      {r4,pc}
;;;198    
                          ENDP

                  |L20.16|
                          DCD      0x40050000

                          AREA ||i.dump_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  dump_buffer PROC
;;;135    
;;;136    void dump_buffer(uint8_t *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;137    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;138        uint16_t i = 0;
000006  2400              MOVS     r4,#0
;;;139        
;;;140        printf("dump_buffer : %2d\r\n" , nBytes);    
000008  a00b              ADR      r0,|L21.56|
00000a  f7fffffe          BL       __2printf
;;;141        for (i = 0 ; i < nBytes ; i++)
;;;142        {
;;;143            printf("0x%2X," , pucBuff[i]);
;;;144            if ((i+1)%8 ==0)
00000e  2701              MOVS     r7,#1
000010  077f              LSLS     r7,r7,#29
000012  e00b              B        |L21.44|
                  |L21.20|
000014  5d31              LDRB     r1,[r6,r4]            ;143
000016  a00d              ADR      r0,|L21.76|
000018  f7fffffe          BL       __2printf
00001c  0760              LSLS     r0,r4,#29
00001e  42f8              CMN      r0,r7
000020  d102              BNE      |L21.40|
;;;145            {
;;;146                printf("\r\n");
000022  a00c              ADR      r0,|L21.84|
000024  f7fffffe          BL       __2printf
                  |L21.40|
000028  1c64              ADDS     r4,r4,#1
00002a  b2a4              UXTH     r4,r4                 ;141
                  |L21.44|
00002c  42ac              CMP      r4,r5                 ;141
00002e  dbf1              BLT      |L21.20|
;;;147            }            
;;;148        }
;;;149        printf("\r\n\r\n");
000030  a009              ADR      r0,|L21.88|
000032  f7fffffe          BL       __2printf
;;;150    }
000036  bdf8              POP      {r3-r7,pc}
;;;151    
                          ENDP

                  |L21.56|
000038  64756d70          DCB      "dump_buffer : %2d\r\n",0
00003c  5f627566
000040  66657220
000044  3a202532
000048  640d0a00
                  |L21.76|
00004c  30782532          DCB      "0x%2X,",0
000050  582c00  
000053  00                DCB      0
                  |L21.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L21.88|
000058  0d0a0d0a          DCB      "\r\n\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.dump_buffer_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  dump_buffer_hex PROC
;;;151    
;;;152    void  dump_buffer_hex(uint8_t *pucBuff, int nBytes)
000000  b5f8              PUSH     {r3-r7,lr}
;;;153    {
000002  460e              MOV      r6,r1
000004  4607              MOV      r7,r0
;;;154        int     nIdx, i;
;;;155    
;;;156        nIdx = 0;
000006  2500              MOVS     r5,#0
000008  e025              B        |L22.86|
                  |L22.10|
;;;157        while (nBytes > 0)
;;;158        {
;;;159            printf("0x%04X  ", nIdx);
00000a  4629              MOV      r1,r5
00000c  a015              ADR      r0,|L22.100|
00000e  f7fffffe          BL       __2printf
;;;160            for (i = 0; i < 16; i++)
000012  2400              MOVS     r4,#0
                  |L22.20|
;;;161                printf("%02X ", pucBuff[nIdx + i]);
000014  1928              ADDS     r0,r5,r4
000016  5c39              LDRB     r1,[r7,r0]
000018  a015              ADR      r0,|L22.112|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1
000020  2c10              CMP      r4,#0x10              ;160
000022  dbf7              BLT      |L22.20|
;;;162            printf("  ");
000024  a014              ADR      r0,|L22.120|
000026  f7fffffe          BL       __2printf
;;;163            for (i = 0; i < 16; i++)
00002a  2400              MOVS     r4,#0
                  |L22.44|
;;;164            {
;;;165                if ((pucBuff[nIdx + i] >= 0x20) && (pucBuff[nIdx + i] < 127))
00002c  1928              ADDS     r0,r5,r4
00002e  5c39              LDRB     r1,[r7,r0]
000030  4608              MOV      r0,r1
000032  3820              SUBS     r0,r0,#0x20
000034  285f              CMP      r0,#0x5f
000036  d203              BCS      |L22.64|
;;;166                    printf("%c", pucBuff[nIdx + i]);
000038  a010              ADR      r0,|L22.124|
00003a  f7fffffe          BL       __2printf
00003e  e002              B        |L22.70|
                  |L22.64|
;;;167                else
;;;168                    printf(".");
000040  a00f              ADR      r0,|L22.128|
000042  f7fffffe          BL       __2printf
                  |L22.70|
000046  1c64              ADDS     r4,r4,#1
000048  1e76              SUBS     r6,r6,#1
00004a  2c10              CMP      r4,#0x10              ;163
00004c  dbee              BLT      |L22.44|
;;;169                nBytes--;
;;;170            }
;;;171            nIdx += 16;
;;;172            printf("\n");
00004e  a00d              ADR      r0,|L22.132|
000050  3510              ADDS     r5,r5,#0x10
000052  f7fffffe          BL       __2printf
                  |L22.86|
000056  2e00              CMP      r6,#0                 ;157
000058  dcd7              BGT      |L22.10|
;;;173        }
;;;174        printf("\n");
00005a  a00a              ADR      r0,|L22.132|
00005c  f7fffffe          BL       __2printf
;;;175    }
000060  bdf8              POP      {r3-r7,pc}
;;;176    
                          ENDP

000062  0000              DCW      0x0000
                  |L22.100|
000064  30782530          DCB      "0x%04X  ",0
000068  34582020
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L22.112|
000070  25303258          DCB      "%02X ",0
000074  2000    
000076  00                DCB      0
000077  00                DCB      0
                  |L22.120|
000078  202000            DCB      "  ",0
00007b  00                DCB      0
                  |L22.124|
00007c  256300            DCB      "%c",0
00007f  00                DCB      0
                  |L22.128|
000080  2e00              DCB      ".",0
000082  00                DCB      0
000083  00                DCB      0
                  |L22.132|
000084  0a00              DCB      "\n",0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.get_tick||, CODE, READONLY, ALIGN=2

                  get_tick PROC
;;;91     
;;;92     uint32_t get_tick(void)
000000  4801              LDR      r0,|L23.8|
;;;93     {
;;;94     	return (conter_tick);
000002  6880              LDR      r0,[r0,#8]  ; conter_tick
;;;95     }
000004  4770              BX       lr
;;;96     
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;824    
;;;825    int main()
000000  f7fffffe          BL       SYS_Init
;;;826    {
;;;827        SYS_Init();
;;;828    
;;;829    	UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;830    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;831    	TIMER3_Init();
00000c  f7fffffe          BL       TIMER3_Init
;;;832    
;;;833    
;;;834    //	SPI_Initial(ENABLE_SPI_REGULAR,ENABLE_SPI_AUTO_SS);
;;;835    //	SPI_Initial(ENABLE_SPI_REGULAR,ENABLE_SPI_NO_AUTO_SS);
;;;836    
;;;837    //	SPI_Initial(ENABLE_SPI_PDMA_IRQ,ENABLE_SPI_AUTO_SS);
;;;838    	SPI_Initial(ENABLE_SPI_PDMA_IRQ,ENABLE_SPI_NO_AUTO_SS);
000010  2100              MOVS     r1,#0
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       SPI_Initial
                  |L24.24|
;;;839    
;;;840    //	SPI_Initial(ENABLE_SPI_PDMA_POLLING,ENABLE_SPI_AUTO_SS);
;;;841    //	SPI_Initial(ENABLE_SPI_PDMA_POLLING,ENABLE_SPI_NO_AUTO_SS);
;;;842    
;;;843        /* Got no where to go, just loop forever */
;;;844        while(1)
;;;845        {
;;;846    		SPI_process();
000018  f7fffffe          BL       SPI_process
00001c  e7fc              B        |L24.24|
;;;847    
;;;848        }
;;;849    }
;;;850    
                          ENDP


                          AREA ||i.reset_buffer||, CODE, READONLY, ALIGN=1

                  reset_buffer PROC
;;;122    
;;;123    void reset_buffer(uint8_t *pucBuff, int nBytes)
000000  2200              MOVS     r2,#0
;;;124    {
;;;125    	#if 1
;;;126        uint16_t i = 0;	
000002  4613              MOV      r3,r2
000004  e002              B        |L25.12|
                  |L25.6|
;;;127        for ( i = 0; i < nBytes; i++)
;;;128        {
;;;129            pucBuff[i] = 0x00;
000006  5483              STRB     r3,[r0,r2]
000008  1c52              ADDS     r2,r2,#1
00000a  b292              UXTH     r2,r2                 ;127
                  |L25.12|
00000c  428a              CMP      r2,r1                 ;127
00000e  dbfa              BLT      |L25.6|
;;;130        }	
;;;131    	#else	//extra 20 bytes , with <string.h>
;;;132    	memset(pucBuff, 0, nBytes * (sizeof(pucBuff[0]) ));
;;;133    	#endif
;;;134    }
000010  4770              BX       lr
;;;135    
                          ENDP


                          AREA ||i.set_tick||, CODE, READONLY, ALIGN=2

                  set_tick PROC
;;;96     
;;;97     void set_tick(uint32_t t)
000000  4901              LDR      r1,|L26.8|
;;;98     {
;;;99     	conter_tick = t;
000002  6088              STR      r0,[r1,#8]  ; conter_tick
;;;100    }
000004  4770              BX       lr
;;;101    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      ||.data||

                          AREA ||i.tick_counter||, CODE, READONLY, ALIGN=2

                  tick_counter PROC
;;;86     
;;;87     void tick_counter(void)
000000  4802              LDR      r0,|L27.12|
;;;88     {
;;;89     	conter_tick++;
000002  6881              LDR      r1,[r0,#8]  ; conter_tick
000004  1c49              ADDS     r1,r1,#1
000006  6081              STR      r1,[r0,#8]  ; conter_tick
;;;90     }
000008  4770              BX       lr
;;;91     
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  SpiTxBuffer
                          %        32
                  SpiRxBuffer
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  6172655f          DCB      0x61,0x72,0x65,0x5f
000008  62756666          DCB      0x62,0x75,0x66,0x66
00000c  657200            DCB      0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  data_cnt
000000  01                DCB      0x01
                  state
000001  000000            DCB      0x00,0x00,0x00
                  BitFlag
                          DCD      0x00000000
                  conter_tick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_058d8fb9____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_058d8fb9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_058d8fb9____REVSH|
#line 402
|__asm___6_main_c_058d8fb9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\pdma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\pdma.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\pdma.crf ..\..\..\Library\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=1

                  PDMA_Close PROC
;;;61      */
;;;62     void PDMA_Close(PDMA_T *pdma)
000000  2201              MOVS     r2,#1
;;;63     {
;;;64         pdma->CHCTL = 0UL;
000002  2100              MOVS     r1,#0
000004  0292              LSLS     r2,r2,#10
000006  1880              ADDS     r0,r0,r2
000008  6001              STR      r1,[r0,#0]
;;;65     }
00000a  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=1

                  PDMA_DisableInt PROC
;;;384     */
;;;385    void PDMA_DisableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;386    {
000002  2401              MOVS     r4,#1
;;;387        switch (u32Mask)
;;;388        {
;;;389        case PDMA_INT_TRANS_DONE:
;;;390            pdma->INTEN &= ~(1ul << u32Ch);
000004  02a3              LSLS     r3,r4,#10
000006  408c              LSLS     r4,r4,r1
000008  18c3              ADDS     r3,r0,r3
00000a  2a00              CMP      r2,#0                 ;387
00000c  d007              BEQ      |L2.30|
00000e  2a01              CMP      r2,#1                 ;387
000010  d009              BEQ      |L2.38|
000012  2a02              CMP      r2,#2                 ;387
000014  d102              BNE      |L2.28|
;;;391            break;
;;;392    
;;;393        case PDMA_INT_TEMPTY:
;;;394            pdma->DSCT[u32Ch].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;395            break;
;;;396    
;;;397        case PDMA_INT_TIMEOUT:
;;;398            pdma->TOUTIEN &= ~(1ul << u32Ch);
000016  6b98              LDR      r0,[r3,#0x38]
000018  43a0              BICS     r0,r0,r4
00001a  6398              STR      r0,[r3,#0x38]
                  |L2.28|
;;;399            break;
;;;400    
;;;401        default:
;;;402            break;
;;;403        }
;;;404    }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  6998              LDR      r0,[r3,#0x18]         ;390
000020  43a0              BICS     r0,r0,r4              ;390
000022  6198              STR      r0,[r3,#0x18]         ;390
000024  bd10              POP      {r4,pc}
                  |L2.38|
000026  0109              LSLS     r1,r1,#4              ;394
000028  5842              LDR      r2,[r0,r1]            ;394
00002a  2380              MOVS     r3,#0x80              ;394
00002c  431a              ORRS     r2,r2,r3              ;394
00002e  5042              STR      r2,[r0,r1]            ;394
000030  bd10              POP      {r4,pc}
;;;405    
                          ENDP


                          AREA ||i.PDMA_DisableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_DisableTimeout PROC
;;;276     */
;;;277    void PDMA_DisableTimeout(PDMA_T *pdma, uint32_t u32Mask)
000000  2201              MOVS     r2,#1
;;;278    {
;;;279        pdma->TOUTEN &= ~u32Mask;
000002  0292              LSLS     r2,r2,#10
000004  1880              ADDS     r0,r0,r2
000006  6b42              LDR      r2,[r0,#0x34]
000008  438a              BICS     r2,r2,r1
00000a  6342              STR      r2,[r0,#0x34]
;;;280    }
00000c  4770              BX       lr
;;;281    
                          ENDP


                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=1

                  PDMA_EnableInt PROC
;;;349     */
;;;350    void PDMA_EnableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;351    {
000002  2401              MOVS     r4,#1
;;;352        switch (u32Mask)
;;;353        {
;;;354        case PDMA_INT_TRANS_DONE:
;;;355            pdma->INTEN |= (1ul << u32Ch);
000004  02a3              LSLS     r3,r4,#10
000006  408c              LSLS     r4,r4,r1
000008  18c3              ADDS     r3,r0,r3
00000a  2a00              CMP      r2,#0                 ;352
00000c  d007              BEQ      |L4.30|
00000e  2a01              CMP      r2,#1                 ;352
000010  d009              BEQ      |L4.38|
000012  2a02              CMP      r2,#2                 ;352
000014  d102              BNE      |L4.28|
;;;356            break;
;;;357    
;;;358        case PDMA_INT_TEMPTY:
;;;359            pdma->DSCT[u32Ch].CTL &= ~PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;360            break;
;;;361    
;;;362        case PDMA_INT_TIMEOUT:
;;;363            pdma->TOUTIEN |= (1ul << u32Ch);
000016  6b98              LDR      r0,[r3,#0x38]
000018  4320              ORRS     r0,r0,r4
00001a  6398              STR      r0,[r3,#0x38]
                  |L4.28|
;;;364            break;
;;;365    
;;;366        default:
;;;367            break;
;;;368        }
;;;369    }
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  6998              LDR      r0,[r3,#0x18]         ;355
000020  4320              ORRS     r0,r0,r4              ;355
000022  6198              STR      r0,[r3,#0x18]         ;355
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  0109              LSLS     r1,r1,#4              ;359
000028  5842              LDR      r2,[r0,r1]            ;359
00002a  2380              MOVS     r3,#0x80              ;359
00002c  439a              BICS     r2,r2,r3              ;359
00002e  5042              STR      r2,[r0,r1]            ;359
000030  bd10              POP      {r4,pc}
;;;370    
                          ENDP


                          AREA ||i.PDMA_EnableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_EnableTimeout PROC
;;;261     */
;;;262    void PDMA_EnableTimeout(PDMA_T *pdma, uint32_t u32Mask)
000000  2201              MOVS     r2,#1
;;;263    {
;;;264        pdma->TOUTEN |= u32Mask;
000002  0292              LSLS     r2,r2,#10
000004  1880              ADDS     r0,r0,r2
000006  6b42              LDR      r2,[r0,#0x34]
000008  430a              ORRS     r2,r2,r1
00000a  6342              STR      r2,[r0,#0x34]
;;;265    }
00000c  4770              BX       lr
;;;266    
                          ENDP


                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;36      */
;;;37     void PDMA_Open(PDMA_T *pdma, uint32_t u32Mask)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
;;;39         uint32_t i;
;;;40     
;;;41         for (i = 0UL; i < PDMA_CH_MAX; i++)
000002  2200              MOVS     r2,#0
;;;42         {
;;;43             if((1 << i) & u32Mask)
;;;44             {
;;;45                 pdma->DSCT[i].CTL = 0UL;
;;;46                 u8ChSelect[i] = PDMA_MEM;
000004  4d09              LDR      r5,|L6.44|
000006  2601              MOVS     r6,#1                 ;43
000008  4613              MOV      r3,r2                 ;43
                  |L6.10|
00000a  4634              MOV      r4,r6                 ;43
00000c  4094              LSLS     r4,r4,r2              ;43
00000e  420c              TST      r4,r1                 ;43
000010  d002              BEQ      |L6.24|
000012  0114              LSLS     r4,r2,#4              ;45
000014  5103              STR      r3,[r0,r4]            ;45
000016  54ab              STRB     r3,[r5,r2]
                  |L6.24|
000018  1c52              ADDS     r2,r2,#1
00001a  2a09              CMP      r2,#9                 ;41
00001c  d3f5              BCC      |L6.10|
;;;47             }
;;;48         }
;;;49     
;;;50         pdma->CHCTL |= u32Mask;
00001e  2201              MOVS     r2,#1
000020  0292              LSLS     r2,r2,#10
000022  1880              ADDS     r0,r0,r2
000024  6802              LDR      r2,[r0,#0]
000026  430a              ORRS     r2,r2,r1
000028  6002              STR      r2,[r0,#0]
;;;51     }
00002a  bd70              POP      {r4-r6,pc}
;;;52     
                          ENDP

                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.PDMA_SetBurstType||, CODE, READONLY, ALIGN=1

                  PDMA_SetBurstType PROC
;;;245     */
;;;246    void PDMA_SetBurstType(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize)
000000  b530              PUSH     {r4,r5,lr}
;;;247    {
;;;248        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXTYPE_Msk | PDMA_DSCT_CTL_BURSIZE_Msk);
000002  0109              LSLS     r1,r1,#4
000004  5844              LDR      r4,[r0,r1]
000006  2574              MOVS     r5,#0x74
000008  43ac              BICS     r4,r4,r5
00000a  5044              STR      r4,[r0,r1]
;;;249        pdma->DSCT[u32Ch].CTL |= (u32BurstType | u32BurstSize);
00000c  5844              LDR      r4,[r0,r1]
00000e  431a              ORRS     r2,r2,r3
000010  4314              ORRS     r4,r4,r2
000012  5044              STR      r4,[r0,r1]
;;;250    }
000014  bd30              POP      {r4,r5,pc}
;;;251    
                          ENDP


                          AREA ||i.PDMA_SetTimeOut||, CODE, READONLY, ALIGN=1

                  PDMA_SetTimeOut PROC
;;;294     */
;;;295    void PDMA_SetTimeOut(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt)
000000  b510              PUSH     {r4,lr}
;;;296    {
;;;297        switch (u32Ch)
;;;298        {
;;;299        case 0ul:
;;;300            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC0_Msk) | u32TimeOutCnt;
000002  2401              MOVS     r4,#1
000004  02a4              LSLS     r4,r4,#10
000006  1900              ADDS     r0,r0,r4
000008  2900              CMP      r1,#0                 ;297
00000a  d002              BEQ      |L8.18|
00000c  2901              CMP      r1,#1                 ;297
00000e  d109              BNE      |L8.36|
000010  e003              B        |L8.26|
                  |L8.18|
000012  6c04              LDR      r4,[r0,#0x40]
000014  0c24              LSRS     r4,r4,#16
000016  0424              LSLS     r4,r4,#16
;;;301            break;
000018  e002              B        |L8.32|
                  |L8.26|
;;;302    
;;;303        case 1ul:
;;;304            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC1_Msk) | (u32TimeOutCnt << PDMA_TOC0_1_TOC1_Pos);
00001a  6c04              LDR      r4,[r0,#0x40]
00001c  041b              LSLS     r3,r3,#16
00001e  b2a4              UXTH     r4,r4
                  |L8.32|
000020  431c              ORRS     r4,r4,r3              ;300
000022  6404              STR      r4,[r0,#0x40]         ;300
                  |L8.36|
000024  2301              MOVS     r3,#1                 ;296
;;;305            break;
;;;306    
;;;307        default:
;;;308            break;
;;;309        }
;;;310    
;;;311        if (u32OnOff)
;;;312            pdma->TOUTEN |= (1ul << u32Ch);
000026  408b              LSLS     r3,r3,r1
;;;313        else
;;;314            pdma->TOUTEN &= ~(1ul << u32Ch);
000028  6b41              LDR      r1,[r0,#0x34]
00002a  2a00              CMP      r2,#0                 ;311
00002c  d001              BEQ      |L8.50|
00002e  4319              ORRS     r1,r1,r3              ;312
000030  e000              B        |L8.52|
                  |L8.50|
000032  4399              BICS     r1,r1,r3
                  |L8.52|
000034  6341              STR      r1,[r0,#0x34]         ;312
;;;315    }
000036  bd10              POP      {r4,pc}
;;;316    
                          ENDP


                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=1

                  PDMA_SetTransferAddr PROC
;;;105     */
;;;106    void PDMA_SetTransferAddr(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b570              PUSH     {r4-r6,lr}
;;;107    {
;;;108        pdma->DSCT[u32Ch].SA = u32SrcAddr;
000002  0109              LSLS     r1,r1,#4
000004  180e              ADDS     r6,r1,r0
000006  9d04              LDR      r5,[sp,#0x10]
000008  9c05              LDR      r4,[sp,#0x14]
00000a  6072              STR      r2,[r6,#4]
;;;109        pdma->DSCT[u32Ch].DA = u32DstAddr;
00000c  60b5              STR      r5,[r6,#8]
;;;110        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_SAINC_Msk | PDMA_DSCT_CTL_DAINC_Msk);
00000e  5842              LDR      r2,[r0,r1]
000010  250f              MOVS     r5,#0xf
000012  022d              LSLS     r5,r5,#8
000014  43aa              BICS     r2,r2,r5
000016  5042              STR      r2,[r0,r1]
;;;111        pdma->DSCT[u32Ch].CTL |= (u32SrcCtrl | u32DstCtrl);
000018  5842              LDR      r2,[r0,r1]
00001a  4323              ORRS     r3,r3,r4
00001c  431a              ORRS     r2,r2,r3
00001e  5042              STR      r2,[r0,r1]
;;;112    }
000020  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP


                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;81      */
;;;82     void PDMA_SetTransferCnt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  b530              PUSH     {r4,r5,lr}
;;;83     {
;;;84         pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXCNT_Msk | PDMA_DSCT_CTL_TXWIDTH_Msk);
000002  0109              LSLS     r1,r1,#4
000004  5844              LDR      r4,[r0,r1]
000006  4d06              LDR      r5,|L10.32|
000008  402c              ANDS     r4,r4,r5
00000a  5044              STR      r4,[r0,r1]
;;;85         pdma->DSCT[u32Ch].CTL |= (u32Width | ((u32TransCount - 1UL) << PDMA_DSCT_CTL_TXCNT_Pos));
00000c  5844              LDR      r4,[r0,r1]
00000e  2501              MOVS     r5,#1
000010  041b              LSLS     r3,r3,#16
000012  042d              LSLS     r5,r5,#16
000014  1b5b              SUBS     r3,r3,r5
000016  4313              ORRS     r3,r3,r2
000018  431c              ORRS     r4,r4,r3
00001a  5044              STR      r4,[r0,r1]
;;;86     }
00001c  bd30              POP      {r4,r5,pc}
;;;87     
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x0000cfff

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;166     */
;;;167    void PDMA_SetTransferMode(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  b5ff              PUSH     {r0-r7,lr}
;;;168    {
;;;169        u8ChSelect[u32Ch] = u32Peripheral;
000002  4b2f              LDR      r3,|L11.192|
;;;170    
;;;171        switch (u32Ch)
;;;172        {
;;;173        case 0ul:
;;;174            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC0_Msk) | u32Peripheral;
;;;175            break;
;;;176    
;;;177        case 1ul:
;;;178            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC1_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC1_Pos);
000004  0217              LSLS     r7,r2,#8
000006  545a              STRB     r2,[r3,r1]            ;169
000008  2309              MOVS     r3,#9                 ;174
00000a  01db              LSLS     r3,r3,#7              ;174
00000c  18c4              ADDS     r4,r0,r3              ;174
;;;179            break;
;;;180    
;;;181        case 2ul:
;;;182            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC2_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC2_Pos);
00000e  0416              LSLS     r6,r2,#16
;;;183            break;
;;;184    
;;;185        case 3ul:
;;;186            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC3_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC3_Pos);
000010  0615              LSLS     r5,r2,#24
000012  000b              MOVS     r3,r1                 ;171
000014  f7fffffe          BL       __ARM_common_switch8
000018  09060c12          DCB      0x09,0x06,0x0c,0x12
00001c  191f252b          DCB      0x19,0x1f,0x25,0x2b
000020  32383d00          DCB      0x32,0x38,0x3d,0x00
000024  6823              LDR      r3,[r4,#0]            ;174
000026  099b              LSRS     r3,r3,#6              ;174
000028  019b              LSLS     r3,r3,#6              ;174
00002a  4313              ORRS     r3,r3,r2              ;174
00002c  6023              STR      r3,[r4,#0]            ;174
00002e  e030              B        |L11.146|
000030  6822              LDR      r2,[r4,#0]            ;178
000032  233f              MOVS     r3,#0x3f              ;178
000034  021b              LSLS     r3,r3,#8              ;178
000036  439a              BICS     r2,r2,r3              ;178
000038  433a              ORRS     r2,r2,r7              ;178
00003a  e004              B        |L11.70|
00003c  6822              LDR      r2,[r4,#0]            ;182
00003e  233f              MOVS     r3,#0x3f              ;182
000040  041b              LSLS     r3,r3,#16             ;182
000042  439a              BICS     r2,r2,r3              ;182
000044  4332              ORRS     r2,r2,r6              ;182
                  |L11.70|
000046  6022              STR      r2,[r4,#0]            ;178
000048  e023              B        |L11.146|
00004a  6822              LDR      r2,[r4,#0]
00004c  233f              MOVS     r3,#0x3f
00004e  061b              LSLS     r3,r3,#24
000050  439a              BICS     r2,r2,r3
000052  432a              ORRS     r2,r2,r5
;;;187            break;
000054  e7f7              B        |L11.70|
;;;188    
;;;189        case 4ul:
;;;190            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC4_Msk) | u32Peripheral;
000056  6863              LDR      r3,[r4,#4]
000058  099b              LSRS     r3,r3,#6
00005a  019b              LSLS     r3,r3,#6
00005c  4313              ORRS     r3,r3,r2
00005e  6063              STR      r3,[r4,#4]
;;;191            break;
000060  e017              B        |L11.146|
;;;192    
;;;193        case 5ul:
;;;194            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC5_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC5_Pos);
000062  6862              LDR      r2,[r4,#4]
000064  233f              MOVS     r3,#0x3f
000066  021b              LSLS     r3,r3,#8
000068  439a              BICS     r2,r2,r3
00006a  433a              ORRS     r2,r2,r7
;;;195            break;
00006c  e004              B        |L11.120|
;;;196    
;;;197        case 6ul:
;;;198            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC6_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC6_Pos);
00006e  6862              LDR      r2,[r4,#4]
000070  233f              MOVS     r3,#0x3f
000072  041b              LSLS     r3,r3,#16
000074  439a              BICS     r2,r2,r3
000076  4332              ORRS     r2,r2,r6
                  |L11.120|
000078  6062              STR      r2,[r4,#4]            ;194
00007a  e00a              B        |L11.146|
;;;199            break;
;;;200    
;;;201        case 7ul:
;;;202            pdma->REQSEL4_7 = (pdma->REQSEL4_7 & ~PDMA_REQSEL4_7_REQSRC7_Msk) | (u32Peripheral << PDMA_REQSEL4_7_REQSRC7_Pos);
00007c  6862              LDR      r2,[r4,#4]
00007e  233f              MOVS     r3,#0x3f
000080  061b              LSLS     r3,r3,#24
000082  439a              BICS     r2,r2,r3
000084  432a              ORRS     r2,r2,r5
;;;203            break;
000086  e7f7              B        |L11.120|
;;;204    
;;;205        case 8ul:
;;;206            pdma->REQSEL8 = (pdma->REQSEL8 & ~PDMA_REQSEL8_REQSRC8_Msk) | u32Peripheral;
000088  68a3              LDR      r3,[r4,#8]
00008a  099b              LSRS     r3,r3,#6
00008c  019b              LSLS     r3,r3,#6
00008e  4313              ORRS     r3,r3,r2
000090  60a3              STR      r3,[r4,#8]
                  |L11.146|
;;;207            break;
;;;208    
;;;209        default:
;;;210            break;
;;;211        }
;;;212    
;;;213        if (u32ScatterEn)
000092  9a03              LDR      r2,[sp,#0xc]
;;;214        {
;;;215            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_SCATTER;
000094  0109              LSLS     r1,r1,#4
000096  2a00              CMP      r2,#0                 ;213
;;;216            pdma->DSCT[u32Ch].NEXT = u32DescAddr - (pdma->SCATBA);
;;;217        }
;;;218        else
;;;219        {
;;;220            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_BASIC;
000098  5842              LDR      r2,[r0,r1]
00009a  d00c              BEQ      |L11.182|
00009c  0892              LSRS     r2,r2,#2              ;215
00009e  0092              LSLS     r2,r2,#2              ;215
0000a0  1c92              ADDS     r2,r2,#2              ;215
0000a2  5042              STR      r2,[r0,r1]            ;215
0000a4  2201              MOVS     r2,#1                 ;216
0000a6  0292              LSLS     r2,r2,#10             ;216
0000a8  1882              ADDS     r2,r0,r2              ;216
0000aa  6bd3              LDR      r3,[r2,#0x3c]         ;216
0000ac  9a09              LDR      r2,[sp,#0x24]         ;216
0000ae  1ad2              SUBS     r2,r2,r3              ;216
0000b0  1808              ADDS     r0,r1,r0              ;216
0000b2  60c2              STR      r2,[r0,#0xc]          ;216
;;;221        }
;;;222    }
0000b4  bdff              POP      {r0-r7,pc}
                  |L11.182|
0000b6  0892              LSRS     r2,r2,#2              ;220
0000b8  0092              LSLS     r2,r2,#2              ;220
0000ba  1c52              ADDS     r2,r2,#1              ;220
0000bc  5042              STR      r2,[r0,r1]            ;220
0000be  bdff              POP      {r0-r7,pc}
;;;223    
                          ENDP

                  |L11.192|
                          DCD      ||.bss||

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;326     */
;;;327    void PDMA_Trigger(PDMA_T *pdma, uint32_t u32Ch)
000000  4a05              LDR      r2,|L12.24|
;;;328    {
;;;329        if (u8ChSelect[u32Ch] == PDMA_MEM)
000002  5c52              LDRB     r2,[r2,r1]
000004  2a00              CMP      r2,#0
000006  d105              BNE      |L12.20|
;;;330        {
;;;331            pdma->SWREQ = (1ul << u32Ch);
000008  2201              MOVS     r2,#1
00000a  408a              LSLS     r2,r2,r1
00000c  2101              MOVS     r1,#1
00000e  0289              LSLS     r1,r1,#10
000010  1840              ADDS     r0,r0,r1
000012  6082              STR      r2,[r0,#8]
                  |L12.20|
;;;332        }
;;;333        else {}
;;;334    }
000014  4770              BX       lr
;;;335    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  u8ChSelect
                          %        9

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L81.16|
00000e  461d              MOV      r5,r3
                  |L81.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 402
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
